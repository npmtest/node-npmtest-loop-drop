{"/home/travis/build/npmtest/node-npmtest-loop-drop/test.js":"/* istanbul instrument in package npmtest_loop_drop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-loop-drop/lib.npmtest_loop_drop.js":"/* istanbul instrument in package npmtest_loop_drop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_loop_drop = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_loop_drop = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-loop-drop/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-loop-drop && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_loop_drop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_loop_drop\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_loop_drop.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_loop_drop.rollup.js'] =\n            local.assetsDict['/assets.npmtest_loop_drop.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_loop_drop.__dirname + '/lib.npmtest_loop_drop.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/main.js":"var electron = require('electron')\nvar BrowserWindow = electron.BrowserWindow\nvar fs = require('fs')\nvar Menu = electron.Menu\nvar menu = Menu.buildFromTemplate(require('lib/menu'))\nvar join = require('path').join\n\nvar welcomeWindow = null\nvar mainWindow = null\nvar currentProject = null\nvar quiting = false\n\nelectron.app.on('before-quit', function() {\n  quiting = true\n})\n\nelectron.ipcMain.on('choose-project', function(event, arg) {\n  if (arg === 'new') {\n    electron.dialog.showSaveDialog({\n      title: 'Create New Project'\n    }, function(path){\n      if (path) {\n        createProject(path)\n      }\n    })\n  } else if (arg === 'demo') {\n    loadProject(getDemoProjectPath())\n  } else if (arg === 'browse') {\n    electron.dialog.showOpenDialog({\n      title: 'Browse for Project Folder',\n      properties: [ 'openDirectory' ]\n    }, function(paths) {\n      if (paths && paths.length) {\n        loadProject(paths[0])\n      }\n    })\n  } else {\n    chooseProject()\n  }\n})\n\nelectron.ipcMain.on('loaded', function(event, arg) {\n  event.sender.send('load-project', currentProject)\n})\n\nelectron.app.on('window-all-closed', function() {\n  //if (process.platform != 'darwin')\n  electron.app.quit()\n})\n\nelectron.app.on('ready', function() {\n  if (process.platform === 'darwin') {\n    Menu.setApplicationMenu(menu)\n  }\n  chooseProject()\n});\n\nfunction chooseProject() {\n\n  if (mainWindow) {\n    mainWindow.close()\n  }\n\n  if (welcomeWindow) {\n    welcomeWindow.show()\n  } else {\n    welcomeWindow = new BrowserWindow({\n      title: 'Choose Project',\n      acceptFirstMouse: true,\n      width: 500,\n      height: 550,\n      show: false\n    })\n\n    welcomeWindow.webContents.on('did-finish-load', function () {\n      welcomeWindow.show()\n    })\n\n    welcomeWindow.webContents.on('will-navigate', function (e, url) {\n      e.preventDefault()\n      electron.shell.openExternal(url)\n    })\n\n    welcomeWindow.loadURL('file://' + __dirname + '/views/welcome.html')\n\n    welcomeWindow.on('closed', function () {\n      welcomeWindow = null\n    })\n  }\n}\n\nfunction createProject(path) {\n  fs.mkdir(path, function(err) {\n    if (err) throw err\n    loadProject(path)\n  })\n}\n\nfunction getDemoProjectPath() {\n  // find demo-project by looking upwards\n  var searchLevels = 2\n  var lookUp = []\n  for (var i=0;i<searchLevels;i++) {\n    lookUp.push('..')\n    var current = join.apply(this, [__dirname].concat(lookUp, 'demo-project'))\n    if (fs.existsSync(current)) {\n      return current\n    }\n  }\n\n  // fallback\n  return join(__dirname, 'demo-project')\n}\n\nfunction loadProject(path) {\n\n  if (mainWindow) {\n    mainWindow.close()\n  }\n\n  if (welcomeWindow) {\n    welcomeWindow.hide()\n  }\n\n  currentProject = path\n\n  mainWindow = new BrowserWindow({\n    width: 1400,\n    height: 900,\n    title: path + ' — Loop Drop',\n    acceptFirstMouse: true,\n    show: false,\n    webPreferences: {\n      experimentalFeatures: true,\n      pageVisibility: true\n    }\n  })\n\n  mainWindow.webContents.on('did-finish-load', function() {\n    mainWindow.show()\n  })\n\n  mainWindow.webContents.on('will-navigate', function(e) {\n    e.preventDefault()\n  })\n\n  mainWindow.webContents.on('will-navigate', function(e, url) {\n    e.preventDefault()\n    electron.shell.openExternal(url)\n  })\n\n  mainWindow.loadURL('file://' + __dirname + '/views/window.html')\n  mainWindow.on('close', function() {\n    mainWindow = null\n    if (!quiting) {\n      chooseProject()\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/scripts/start.js":"#!/usr/bin/env node\n\nvar spawn = require('child_process').spawn\nvar electron = require('electron-prebuilt')\nvar join = require('path').join\n\nvar app = spawn(electron, ['main.js'], { \n  stdio: 'inherit',\n  cwd: join(__dirname, '..') \n}).on('exit', function(i, m) {\n  process.exit()\n})\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/node_modules/electron-prebuilt/index.js":"var fs = require('fs')\nvar path = require('path')\n\nmodule.exports = path.join(__dirname, fs.readFileSync(path.join(__dirname, 'path.txt'), 'utf-8'))\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/active-indexes.js":"var computed = require('observ/computed')\n\nmodule.exports = function activeIndexes (obs) {\n  return computed([obs], function (grid) {\n    var result = []\n    grid.data.forEach(pushIndexIfPresent, result)\n    return result\n  })\n}\n\nfunction pushIndexIfPresent (value, index) {\n  if (value) {\n    this.push(index)\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/apply-mixer-params.js":"var computed = require('observ/computed')\nvar ObservArray = require('observ-array')\nvar Observ = require('observ')\nvar extend = require('xtend')\n\nmodule.exports = function (obs) {\n  // hack for mixer params\n  var params = ['A', 'B', 'C']\n  obs.params = computed([obs], function (values) {\n    var usedParams = []\n    JSON.stringify(values, function (key, value) {\n      if (value && value.node === 'linkParam') {\n        var index = params.indexOf(value.param)\n        if (~index) {\n          usedParams[index] = value.param\n        }\n      }\n      return value\n    })\n    return usedParams\n  })\n\n  var paramOverrideStack = ObservArray([])\n  obs.overrideParams = function (params) {\n    paramOverrideStack.push(params)\n    return function release () {\n      var index = paramOverrideStack.indexOf(params)\n      if (~index) {\n        paramOverrideStack.splice(index, 1)\n      }\n    }\n  }\n\n  obs.context.paramLookup = ParamLookup(obs.context.paramLookup, params, paramOverrideStack)\n  return obs.context.paramLookup.destroy\n}\n\nfunction ParamLookup (rootParams, params, paramOverrideStack) {\n  var raw = {}\n  var paramLookup = Observ()\n\n  function refresh () {\n    var result = extend(rootParams())\n    var rawResult = extend(rootParams._raw)\n    for (var i = 0; i < params.length; i++) {\n      var key = params[i]\n      var override = paramOverrideStack.get(paramOverrideStack.getLength() - 1)\n      if (override && override[i] != null) {\n        result[key] = typeof override[i] === 'function' ? override[i]() : override[i] || 0\n        rawResult[key] = override[i]\n      } else {\n        result[key] = 0\n        rawResult[key] = 0\n      }\n    }\n    raw = rawResult\n    paramLookup.set(result)\n  }\n\n  var releases = [\n    rootParams(refresh),\n    paramOverrideStack(refresh)\n  ]\n\n  paramLookup.destroy = function () {\n    while (releases.length) {\n      releases.pop()()\n    }\n  }\n\n  paramLookup.get = function (key) {\n    return raw[key]\n  }\n\n  paramLookup.keys = function (key) {\n    return Object.keys(raw)\n  }\n\n  return paramLookup\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/apply-params.js":"var computed = require('observ/computed')\nvar ObservArray = require('observ-array')\n\nmodule.exports = function applyParams (obs) {\n  // HACK: make ring modulator effect work on output channel\n  var triggeredSlots = []\n  obs.slots(function (slots) {\n    obs.slots.forEach(function (slot) {\n      var id = slot.id()\n      if (!isFinite(id) && !~triggeredSlots.indexOf(id)) {\n        triggeredSlots.push(slot.id)\n        slot.triggerOn(obs.context.audio.currentTime)\n      }\n    })\n  })\n\n  var paramOverrideStack = ObservArray([])\n  obs.overrideParams = function (params) {\n    paramOverrideStack.push(params)\n    return function release () {\n      var index = paramOverrideStack.indexOf(params)\n      if (~index) {\n        paramOverrideStack.splice(index, 1)\n      }\n    }\n  }\n\n  var raw = {}\n\n  var paramLookup = computed([obs.params, obs.paramValues, paramOverrideStack], function (params, values, overrides) {\n    var result = {}\n    var rawResult = {}\n    for (var i = 0; i < params.length; i++) {\n      var key = params[i]\n      var override = paramOverrideStack.get(paramOverrideStack.getLength() - 1)\n      if (override && override[i] != null) {\n        result[key] = typeof override[i] === 'function' ? override[i]() : override[i] || 0\n        rawResult[key] = override[i]\n      } else {\n        result[key] = values && values[key] || 0\n        rawResult[key] = obs.paramValues.get(key)\n      }\n    }\n    raw = rawResult\n    return result\n  })\n\n  paramLookup.get = function(key) {\n    return raw[key]\n  }\n\n  paramLookup.keys = function(key) {\n    return Object.keys(raw)\n  }\n\n  obs.context.paramLookup = paramLookup\n\n  obs.resolveAvailableParam = function(id){\n    var base = id\n    var items = obs.params()\n    var incr = 0\n\n    while (~items.indexOf(id)){\n      incr += 1\n      id = base + ' ' + (incr + 1)\n    }\n\n    return id\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/apply-scale.js":"var defaultScale = {\n  offset: 0,\n  notes: [0, 2, 4, 5, 7, 9, 11]\n}\n\nmodule.exports = applyScale\n\nfunction applyScale (base, scale) {\n  var offset = scale && scale.offset || defaultScale.offset\n  var notes = scale && scale.notes || defaultScale.notes\n\n  var multiplier = Math.floor(base / notes.length)\n  var scalePosition = mod(base, notes.length)\n  var absScalePosition = Math.floor(scalePosition)\n  var fraction = scalePosition - absScalePosition\n\n  var note = notes[absScalePosition] + offset\n\n  if (fraction) {\n    var interval = getInterval(absScalePosition, notes)\n    return note + (interval * fraction) + (multiplier * 12)\n  } else {\n    return note + (multiplier * 12)\n  }\n}\n\nfunction getInterval (current, notes) {\n  if (current >= notes.length - 1) {\n    return 12 + notes[0] - notes[current]\n  } else {\n    return notes[current + 1] - notes[current]\n  }\n}\n\nfunction mod (n, m) {\n  return ((n % m) + m) % m\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/array-stack.js":"var computed = require('observ/computed')\n\nmodule.exports = ArrayStack\n\nfunction ArrayStack (items) {\n  return computed(items, function(_) {\n    var result = []\n    for (var i = 0; i < arguments.length; i++) {\n      var arr = arguments[i]\n      for (var k = 0; k < arr.length; k++) {\n        if (arr[k] != null) {\n          result[k] = arr[k]\n        }\n      }\n    }\n    return result\n  })\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/assign-available-port.js":"module.exports = assignAvailablePort\n\nfunction assignAvailablePort (node) {\n  var nodeInfo = node.context.nodeInfo.lookup[node().node]\n  if (nodeInfo && node.port && nodeInfo.portMatch) {\n    if (!node.port() || !nodeInfo.portMatch.exec(node.port())) {\n      var availablePorts = node.context.midiPorts().filter(function (name) {\n        return nodeInfo.portMatch.exec(name)\n      })\n\n      var usedPorts = node.context.collection.map(function (controller) {\n        return controller.port && controller.port()\n      }).filter(function (name) {\n        return availablePorts.includes(name)\n      })\n\n      var portName = getRarest(availablePorts.concat(usedPorts))\n      node.port.set(portName)\n    }\n  }\n}\n\nfunction getRarest (array) {\n  var ranked = array.reduce(function (result, item) {\n    result[item] = (result[item] || 0) + 1\n    return result\n  }, {})\n\n  return Object.keys(ranked).sort(function (a, b) {\n    return ranked[a] - ranked[b]\n  })[0]\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/attribute-hook.js":"'use strict';\n\nmodule.exports = AttributeHook;\n\nfunction AttributeHook(value) {\n    if (!(this instanceof AttributeHook)) {\n        return new AttributeHook(value);\n    }\n    this.value = value;\n}\n\nAttributeHook.prototype.hook = function (node, prop, prev) {\n\n    node.setAttribute(prop, this.value);\n};\n\nAttributeHook.prototype.unhook = function (node, prop, next) {\n    if (next && next._type === 'AttributeHook') {\n        return;\n    }\n    node.removeAttribute(prop)\n};\n\nAttributeHook.prototype._type = 'AttributeHook';\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/base-chunk.js":"var ObservStruct = require('observ-struct')\nvar Observ = require('observ')\nvar Property = require('observ-default')\nvar ObservVarhash = require('observ-varhash')\nvar NodeArray = require('observ-node-array')\nvar ArrayGrid = require('array-grid')\nvar computed = require('observ/computed')\nvar nextTick = require('next-tick')\nvar deepEqual = require('deep-equal')\nvar extend = require('xtend/mutable')\n\nmodule.exports = BaseChunk\n\nfunction BaseChunk (context, extraProperties, opts) {\n\n  var obs = ObservStruct(extend({\n    id: Observ(),\n    shape: Property([1,4]),\n    flags: Property([]),\n    chokeAll: Property(false),\n    chokeGroup: Property(),\n    color: Property([255,255,255])\n  }, extraProperties))\n\n  if (context.setup) {\n    obs.selected = computed([obs.id, context.setup.selectedChunkId], function (id, selectedId) {\n      return id === selectedId\n    })\n  }\n\n  obs.context = context\n\n  obs.triggerOn = function(id, at){\n    var slot = context.slotLookup.get(id)\n    var shape = obs.shape()\n    var length = shape[0] * shape[1]\n\n    if (obs.chokeGroup()) {\n      var chokeGroup = resolve(obs.chokeGroup)\n      context.setup.chunks.forEach(function (chunk) {\n        var node = chunk.node || chunk\n        if (node && node !== obs && resolve(node.chokeGroup) === chokeGroup) {\n          chokeAll(node, at)\n        }\n      })\n    }\n\n    if (obs.chokeAll()) {\n      chokeAll(obs, at)\n    }\n\n    if (slot) {\n      if (slot().chokeGroup) {\n        obs.triggers().forEach(function (id) {\n          var otherSlot = context.slotLookup.get(id)\n          if (otherSlot && otherSlot !== slot && otherSlot().chokeGroup === slot().chokeGroup) {\n            otherSlot.choke && otherSlot.choke(at)\n          }\n        })\n      }\n      slot.triggerOn(at)\n    }\n  }\n\n  obs.triggerOff = function(id, at){\n    var slot = context.slotLookup.get(id)\n    if (slot){\n      slot.triggerOff(at)\n    }\n  }\n\n  obs.choke = function (id, at) {\n    var slot = context.slotLookup.get(id)\n    if (slot && slot.choke){\n      slot.choke(at)\n    }\n  }\n\n  obs.getSlot = function(id){\n    return context.slotLookup.get(id)\n  }\n\n  obs.triggers = computed([obs.id, obs.shape, context.slotLookup], function(id, shape){\n    var length = shape[0] * shape[1]\n    var result = []\n    for (var i=0;i<length;i++){\n      if (obs.getSlot(String(i)) || (opts && opts.includedAllTriggers)) {\n        result.push(String(i))\n      } else {\n        result.push(null)\n      }\n    }\n    return result\n  })\n\n  obs.grid = computed([obs.triggers, obs.shape], ArrayGrid)\n\n  obs.resolvedGrid = computed([obs.triggers, obs.shape], function(triggers, shape){\n    return ArrayGrid(triggers.map(getGlobalId), shape)\n  })\n\n  return obs\n\n  // scoped\n\n  function getGlobalId(id){\n    if (id){\n      return obs.id() + '/' + id\n    }\n  }\n}\n\nfunction resolve (val) {\n  return typeof val === 'function' ? val() : val\n}\n\nfunction chokeAll(node, at) {\n  if (node && node.shape && node.choke) {\n    var shape = node.shape()\n    var length = shape[0] * shape[1]\n    for (var i = 0; i < length; i++) {\n      node.choke(String(i), at)\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/cancel-event.js":"module.exports = function(fn, data, opts){\n  var handler = {\n    handleEvent: handle\n  }\n  return handler;\n}\n\nfunction handle(ev){\n  ev.preventDefault()\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/chain-scheduler.js":"var RoutableSlot = require('audio-slot/routable')\nvar Property = require('observ-default')\n\nmodule.exports = function (context, id) {\n\n  var input = context.audio.createGain()\n  var output = context.audio.createGain()\n  var lastRoutes = []\n  var discarded = []\n  var connections = new Map()\n\n  var obs = RoutableSlot(context, {\n    id: Property(id),\n    output: Property('output')\n  }, input, output)\n\n  obs.schedule = function (chain, at) {\n    clearDiscarded()\n    lastRoutes.forEach(function (route) {\n      route.gain.setValueAtTime(0, at)\n    })\n    discarded.push([at, lastRoutes])\n\n    var last = input\n\n    for (var i = 0; i <= chain.length; i++) {\n      if (i < chain.length) {\n        var id = chain[i]\n        var slot = context.slotLookup.get(id)\n        connections.set(last, slot.input)\n        last = slot\n      } else {\n        connections.set(last, output)\n      }\n    }\n\n    lastRoutes = []\n    connections.forEach(function (output, input) {\n      var route = context.audio.createGain()\n      route.gain.value = 0\n      input.connect(route)\n      route.gain.setValueAtTime(1, at)\n      route.connect(output)\n      lastRoutes.push(route)\n    })\n  }\n\n  obs.schedule([], 0)\n  return obs\n\n  function clearDiscarded () {\n    var before = context.audio.currentTime\n    for (var i = discarded.length - 1; i >= 0; i--) {\n      var time = discarded[i][0]\n      var routes = discarded[i][1]\n\n      if (time + 5 < before) {\n        routes.forEach(disconnect)\n        discarded.splice(i, 1)\n      }\n    }\n  }\n}\n\nfunction disconnect (item) {\n  item.disconnect()\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/computed-next-tick.js":"var Observ = require('observ')\nvar nextTick = require('next-tick')\n\nmodule.exports = computed\n\nfunction computed(observables, lambda) {\n    var values = observables.map(function (o) {\n        return o()\n    })\n\n    var result = Observ(lambda.apply(null, values))\n    var pending = false\n\n    observables.forEach(function (o, index) {\n        o(function (newValue) {\n            if (values[index] !== newValue) {\n                values[index] = newValue\n                if (!pending){\n                    pending = true\n                    nextTick(result.forceUpdate)\n                }\n            }\n        })\n    })\n\n    result.update = function(){\n        if (pending){\n            result.forceUpdate()\n        }\n    }\n\n    result.forceUpdate = function(){\n        pending = false\n        result.set(lambda.apply(null, values))\n    }\n\n    return result\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/context-menu.js":"var electron = require('electron')\nvar Menu = electron.remote.Menu\nvar MenuItem = electron.remote.MenuItem\nvar BrowserWindow = electron.remote.BrowserWindow\n\nvar contextEvent = null\nvar menu = new Menu()\nmenu.append(new MenuItem({\n  label: 'Inspect Element',\n  click: function() {\n    var x = Math.round(contextEvent.clientX * window.rootContext.zoom())\n    var y = Math.round(contextEvent.clientY * window.rootContext.zoom())\n    BrowserWindow.getFocusedWindow().inspectElement(x, y)\n  }\n}))\n\nwindow.addEventListener('contextmenu', function (e) {\n  e.preventDefault();\n  contextEvent = e\n  menu.popup(electron.remote.getCurrentWindow())\n}, false)\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/copy-file.js":"module.exports = function copyFile (from, to, fs, cb) {\n  fs.createReadStream(from).on('error', cb)\n    .pipe(fs.createWriteStream(to)).on('error', cb)\n    .on('finish', cb)\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/data-transfer.js":"var BaseEvent = require('value-event/base-event')\nvar Delegator = require('dom-delegator')\nvar DataSet = require('data-set')\n\nvar delegator = Delegator()\ndelegator.listenTo('dragstart')\n\nmodule.exports = BaseEvent(function(ev, broadcast){\n  var event = ev._rawEvent\n  broadcast({\n    data: this.data,\n    dataTransfer: event.dataTransfer,\n    preventDefault: event.preventDefault.bind(event)\n  })\n})\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/destroy-all.js":"module.exports = function (obs) {\n  Object.keys(obs).forEach(function (key) {\n    if (obs[key] && typeof obs[key].destroy === 'function') {\n      obs[key].destroy()\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/detect-peaks.js":"var worker = new Worker('file://' + __dirname + '/worker/peaks.js')\nvar callbacks = {}\nvar nextId = 0\n\nworker.onmessage = function (e) {\n  if (callbacks[e.data.id]) {\n    callbacks[e.data.id](e.data.result)\n    delete callbacks[e.data.id]\n  }\n}\n\nmodule.exports = function (data, count, offset, cb) {\n  var id = nextId++\n  offset = offset || [0, 1]\n\n  var range = (offset[1] - offset[0]) * data.length\n  var step = Math.ceil(range / count / 2)\n  var windowSize = Math.ceil(range / count)\n  var start = Math.floor(offset[0] * data.length)\n  var end = Math.floor(offset[1] * data.length)\n\n  callbacks[id] = function (peaks) {\n    peaks = [[start, 1]].concat(peaks)\n    cb(peaks.filter(function (peak, i) {\n      var prev = peaks[i - 1]\n      return peak[0] < end && (!prev || (peak[0] - prev[0]) > step / 4)\n    }).sort(function (a, b) {\n      return a[1] - b[1]\n    }).slice(-count).sort(function (a, b) {\n      return a[0] - b[0]\n    }).map(function (item) {\n      return Math.min(offset[1], item[0] / data.length)\n    }))\n  }\n\n  worker.postMessage({\n    id: id,\n    data: data,\n    windowSize: windowSize,\n    step: step,\n    start: start,\n    end: end\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/ditty-grid-stream.js":"var Through = require('through')\nvar watchGridChanges = require('observ-grid/watch-changes')\n\nmodule.exports = DittyGridStream\n\nfunction DittyGridStream(observableGrid, mapping, scheduler){\n\n  var offEvents = {}\n  var stream = Through()\n\n  var removeListener = watchGridChanges(observableGrid, function(changes, isRevert){\n\n    var resolvedMapping = typeof mapping === 'function' ?\n      mapping() : mapping\n\n    changes.forEach(function(change){\n      var key = change[0] + '/' + change[1]\n      if (offEvents[key]){\n        offEvents[key].time = scheduler.context.currentTime\n        offEvents[key].position = scheduler.getCurrentPosition()\n        stream.queue(offEvents[key])\n        offEvents[key] = null\n      }\n\n      if (change[2]){\n        var id = resolvedMapping.get(change[0], change[1])\n        if (id != null){\n\n          // send on event\n          stream.queue({\n            time: scheduler.context.currentTime,\n            position: scheduler.getCurrentPosition(),\n            id: id,\n            event: 'start'\n          })\n\n          // queue off event\n          offEvents[key] = {\n            id: id,\n            event: 'stop'\n          }\n\n        }\n      }\n    })\n  })\n\n  stream.destroy = function(){\n    if (removeListener){\n      Object.keys(offEvents).forEach(function(key){\n        if (offEvents[key]){\n          stream.queue(offEvents[key])\n        }\n      })\n      offEvents = {}\n      removeListener()\n      removeListener = null\n    }\n  }\n\n  return stream\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/dom-event.js":"module.exports = function(fn, data, opts){\n  var handler = {\n    handleEvent: fn,\n    data: data,\n    opts: opts\n  }\n  return handler;\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/drag-event.js":"var BaseEvent = require('value-event/base-event')\nvar Delegator = require('dom-delegator')\n\nvar delegator = Delegator()\ndelegator.listenTo('dragstart')\ndelegator.listenTo('dragend')\ndelegator.listenTo('dragover')\ndelegator.listenTo('dragenter')\ndelegator.listenTo('dragleave')\ndelegator.listenTo('drop')\n\nmodule.exports = BaseEvent(function(ev, broadcast){\n  var event = ev._rawEvent\n  broadcast({\n    ctrlKey: event.ctrlKey,\n    shiftKey: event.shiftKey,\n    altKey: event.altKey,\n    metaKey: event.metaKey,\n\n    dataTransfer: event.dataTransfer,\n    currentTarget: ev.currentTarget,\n\n    preventDefault: ev.preventDefault,\n    _rawEvent: event,\n\n    data: this.data\n  })\n})","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/editable-hook.js":"var read = require('lib/read')\n\nmodule.exports = EditableHook\n\nfunction EditableHook(param, selected, onChange) {\n  if (!(this instanceof EditableHook)) return new EditableHook(param, selected, onChange) \n\n  if (typeof selected === 'function'){\n    onChange = selected\n    selected = null\n  }\n\n  this.selected = selected\n  this.onChange = onChange\n  this.param = param\n}\n\nEditableHook.prototype.hook = function(node, prop, current){\n  if (current){\n    this.listener = current.listener\n    this.listener.hook = this\n  } else {\n\n    this.listener = {\n      handleEvent: handleEvent,\n      hook: this\n    }\n    node.contentEditable = true\n    node.textContent = read(this.param)\n    node.addEventListener('blur', this.listener)\n    node.addEventListener('keydown', this.listener)\n  }\n\n  if (this.selected && document.activeElement !== node) {\n    setTimeout(function() {\n      node.focus()\n      selectInside(node)\n    }, 10)\n  }\n\n  this.node = node\n}\n\nEditableHook.prototype.unhook = function(node, prop, next){\n  if (!next){\n    node.contentEditable = false\n    node.removeEventListener('blur', this.listener)\n    node.removeEventListener('keydown', this.listener)\n  }\n}\n\nEditableHook.prototype.save = function(){\n\n  var value = read(this.param)\n  this.lastValue = value\n  this.value = this.node.textContent.trim()\n\n  this.param.set(this.value)\n\n  clearSelection()\n\n  if (this.onChange){\n    this.onChange(this.lastValue, this.value, this.param)\n  }\n\n}\n\nEditableHook.prototype.cancel = function(){\n  this.node.textContent = read(this.param)\n  clearSelection()\n}\n\nfunction handleEvent(e){\n  var hook = this.hook\n  if (hook){\n    if (e.type === 'keydown'){\n      if (e.keyCode === 13){ // enter\n        hook.save()\n        e.preventDefault()\n      } else if (e.keyCode === 27){ // esc\n        hook.cancel()\n      }\n    } else if (e.type === 'blur'){\n      hook.save()\n    }\n  }\n}\n\nfunction selectInside(element){\n  var range = document.createRange();\n  range.selectNodeContents(element);\n  var sel = window.getSelection();\n  sel.removeAllRanges();\n  sel.addRange(range)\n}\n\nfunction clearSelection(){\n  var sel = window.getSelection();\n  sel.removeAllRanges();\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/read.js":"module.exports = function(param){\n  if (typeof param == 'function'){\n    return param()\n  } else if (param && param.read){\n    return param.read()\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/file-event.js":"module.exports = FileEventHandler\n\nfunction FileEventHandler(fn, data) {\n  return {\n    fn: fn,\n    data: data,\n    handleEvent: handleEvent\n  }\n}\n\nfunction handleEvent(ev) {\n  var value = ev.currentTarget.files[0]\n  this.fn(value)\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/file-object.js":"var resolveNode = require('observ-node-array/resolve')\nvar deepEqual = require('deep-equal')\nvar getDirName = require('path').dirname\n\nvar resolve = require('path').resolve\nvar relative = require('path').relative\n\nvar Observ = require('observ')\nvar Event = require('geval')\nvar watch = require('observ/watch')\n\nvar ObservFile = require('observ-fs/file')\nvar JsonFile = require('lib/json-file')\n\nvar NO_TRANSACTION = {}\n\nmodule.exports = FileObject\n\nfunction FileObject(parentContext){\n\n  var context = Object.create(parentContext)\n\n  var obs = Observ({})\n  obs.file = null\n  obs.context = context\n\n  // add self to context\n  context.fileObject = obs\n\n  var parsedFile = null\n\n  var loading = false\n  var releaseFile = null\n  var releaseInstance = null\n  var releaseResolved = null\n  var releaseClose = null\n  var currentTransaction = NO_TRANSACTION\n\n  var lastData = {}\n  obs.node = null\n\n  obs(function(data){\n    if (parsedFile && data === parsedFile()){\n      updateNode(data)\n    } else if (parsedFile && data !== parsedFile()){\n      // push update to file\n\n      if (getNode(lastData) !== getNode(data)){\n        updateNode(data)\n      }\n\n      parsedFile.set(data)\n    }\n  })\n\n  var broadcastClose = null\n  obs.onClose = Event(function(broadcast){\n    broadcastClose = broadcast\n  })\n\n  function updateNode(data){\n    if (data !== lastData){\n      var oldNode = getNode(lastData)\n      var newNode = getNode(data)\n      var instance = obs.node\n      var oldInstance = instance\n\n      if (oldNode !== newNode){\n        var ctor = resolveNode(context.nodes, newNode)\n\n        if (instance){\n          releaseResolved()\n          releaseInstance()\n          instance.destroy && instance.destroy()\n          releaseResolved = releaseInstance = instance = obs.node = null\n        }\n\n        if (ctor){\n          instance = obs.node = ctor(context)\n          instance.nodeName = newNode\n\n          releaseResolved = instance.resolved ?\n            instance.resolved(obs.resolved.set) :\n            instance(obs.resolved.set)\n\n          releaseInstance = instance(function(data){\n            if (currentTransaction === NO_TRANSACTION){\n              obs.set(data)\n            }\n          })\n          broadcastNode(instance)\n        } else if (oldInstance){\n          obs.resolved.set(null)\n          broadcastNode(null)\n        }\n\n      }\n\n      if (instance){\n        currentTransaction = data\n        instance.set(data)\n        currentTransaction = NO_TRANSACTION\n      }\n\n      lastData = data\n\n      if (data && loading){\n        loading = false\n        broadcastLoaded() // hacky callback for onLoad\n      }\n    }\n  }\n\n  var broadcastLoaded = null\n  obs.onLoad = Event(function(broadcast){\n    broadcastLoaded = broadcast\n  })\n\n  var broadcastNode = null\n  obs.onNode = Event(function(broadcast){\n    broadcastNode = broadcast\n  })\n\n  obs.resolved = Observ()\n\n  obs.resolvePath = function(src){\n    return resolve(context.cwd, src)\n  }\n\n  obs.relative = function(path){\n    var value = relative(context.cwd, path)\n    if (/^\\./.exec(value)){\n      return value\n    } else {\n      return './' + value\n    }\n  }\n\n  obs.load = function(path){\n\n    releaseClose&&releaseClose()\n\n    if (path){\n      loading = true\n      obs.file = ObservFile(path)\n      obs.path = obs.file.path\n      context.cwd = getDirName(obs.file.path)\n      releaseClose = obs.file.onClose(onClose)\n      switchTo(JsonFile(obs.file))\n    } else {\n      obs.file = null\n      switchTo(null)\n    }\n  }\n\n  obs.close = function(){\n    if (obs.file&&obs.file.close){\n      obs.file.close()\n    }\n  }\n\n  function onClose(){\n    releaseClose&&releaseClose()\n    releaseResolved&&releaseResolved()\n    releaseInstance&&releaseInstance()\n    obs.node && obs.node.destroy && obs.node.destroy()\n    obs.node = releaseInstance = releaseResolved = null\n    obs.file = null\n    switchTo(null)\n    broadcastClose()\n  }\n\n  return obs\n\n  // scoped\n\n  function switchTo(target){\n    if (releaseFile){\n      releaseFile()\n      releaseFile = null\n    }\n\n    if (parsedFile){\n      parsedFile.destroy()\n      parsedFile = null\n    }\n\n    if (target){\n      parsedFile = target\n      releaseFile = target() ? watch(target, obs.set) : target(obs.set)\n    } else {\n      obs.set(null)\n    }\n  }\n\n  function getNode(value){\n    return value && value[context.nodeKey||'node'] || null\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/json-file.js":"var Observ = require('observ')\nvar watch = require('observ/watch')\nvar watchThrottle = require('throttle-observ/watch')\n\nvar PARSE_ERROR = {}\nvar NO_TRANSACTION = {}\n\nmodule.exports = JsonFile\n\nfunction JsonFile(file){\n  var obs = Observ()\n  var lastSaved = null\n  var currentTransaction = NO_TRANSACTION\n  var initialized = false\n\n  var removeWatcher = watch(file, function(data) {\n    if (lastSaved !== data){\n      var parsed = tryParse(data)\n      if (parsed !== PARSE_ERROR) {\n        lastSaved = data\n        data = parsed\n        currentTransaction = data\n        obs.set(data)\n        currentTransaction = NO_TRANSACTION\n      }\n    }\n  })\n\n  var removeListener = watchThrottle(obs, 40, function (data) {\n    if (data !== currentTransaction && initialized) {\n      var value = JSON.stringify(data)\n      if (lastSaved !== value) {\n        lastSaved = value\n        file.set(lastSaved)\n      }\n    }\n  })\n\n  obs.destroy = function(){\n    removeListener()\n    removeWatcher()\n    file.close()\n    obs.set(null)\n  }\n\n  initialized = true\n  return obs\n}\n\nfunction tryParse(data) {\n  try {\n    return JSON.parse(data)\n  } catch (ex) {\n    return PARSE_ERROR\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/find-item-by-path.js":"module.exports = findItemByPath\n\nfunction findItemByPath(items, path){\n  var result = null\n  if (items){\n    items.some(function(item){\n      if (item.path === path){\n        result = item\n        return true\n      }\n    })\n  }\n  return result\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/flag-param.js":"var read = require('lib/read')\n\nmodule.exports = FlagParam\n\nfunction FlagParam(target, flag){\n  if (!(this instanceof FlagParam)) return new FlagParam(target, flag)\n  this.target = target\n  this.flag = flag\n  this.context = target.context\n}\n\nFlagParam.prototype.set = function(value){\n  var current = read(this.target)\n  var val = Array.isArray(current) ? current.slice() : []\n\n  var index = val.indexOf(this.flag)\n  var currentState = !!~index\n  var newState = !!value\n\n  if (newState !== currentState){\n    if (newState){\n      val.push(this.flag)\n    } else {\n      val.splice(index, 1)\n    }\n  }\n\n  this.target.set(val)\n}\n\nFlagParam.prototype.read = function(){\n  var current = read(this.target)\n  return Array.isArray(current) ? !!~current.indexOf(this.flag) : false\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/flash-array.js":"var Observ = require('observ')\n\nmodule.exports = FlashArray\n\nfunction FlashArray () {\n  var obs = Observ([])\n  var active = []\n  var refreshing = false\n\n  obs.flash = function(i, value, duration) {\n    \n    var obj = [i, value]\n    active.push(obj)\n    refresh()\n\n    setTimeout(function() {\n      active.splice(active.indexOf(obj), 1)\n      refresh()\n    }, duration)\n  \n  }\n\n  return obs\n\n  function refresh () {\n    if (!refreshing) {\n      refreshing = true\n      window.requestAnimationFrame(refreshNow)\n    }\n  }\n\n  function refreshNow() {\n    obs.set(active.reduce(flatten, []))\n    refreshing = false\n  }\n}\n\nfunction flatten(result, obj) {\n  result[obj[0]] = obj[1]\n  return result\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/format-params.js":"var gainToDecibels = require('decibels/from-gain')\nvar decibelsToGain = require('decibels/to-gain')\n\nvar frac = require('frac')\nvar beatValues = [1/16, 1/12, 1/8, 1/6, 1/4, 1/3, 3/8, 1/2, 2/3, 3/4, 1, 2, 3, 4, 6, 8]\n\nmodule.exports = {\n  'default': {\n    size: function(value){\n      return getRatio(value, 0, 100)\n    },\n    value: function(offset, start){\n      return getValueFromScreen(offset, start, 0, 100)\n    },\n    display: function(value){\n      return String(round(value, 2))\n    }\n  },\n\n  'midi': {\n    size: function(value){\n      return getRatio(value, 0, 127)\n    },\n    value: function(offset, start){\n      return Math.round(getValueFromScreen(offset, start, 0, 127))\n    },\n    display: function(value){\n      return String(value)\n    }\n  },\n\n  'dB': {\n    size: function(value){\n      return getRatio(value, decibelsToGain(-20), decibelsToGain(20), 'db')\n    },\n    value: function(offset, start){\n      return getValueFromScreen(offset, start, decibelsToGain(-20), decibelsToGain(20), 'db')\n    },\n    display: function(value){\n      return String(gainToDecibels(value)).replace(/Infinity/, \"\\u221e\") + ' dB'\n    }\n  },\n\n  'dBn': {\n    size: function(value){\n      return getRatio(value, -50, 20)\n    },\n    value: function(offset, start){\n      return getValueFromScreen(offset, start, -50, 20)\n    },\n    display: function(value){\n      return String(round(value, 1)).replace(/Infinity/, \"\\u221e\") + ' dB'\n    }\n  },\n\n  'offset1': {\n    size: function(value){\n      return getRatio(value, -1, 1)\n    },\n    value: function(offset, start){\n      return Math.min(1, Math.max(-1, round(getValueFromScreen(offset, start, -1, 1), 2)))\n    },\n    display: function(value){\n      if (value > 0){\n        return '+' + String(round(value, 2))\n      } else {\n        return String(round(value, 2))\n      }\n    }\n  },\n\n  'offset': {\n    size: function(value){\n      if (value > 0){\n        return 0.5 + getRatio(value, 0, 20, 'log+', 20) / 2\n      } else if (value < 0){\n        return 0.5 - getRatio(-value, 0, 20, 'log+', 20) / 2\n      } else {\n        return 0.5\n      }\n    },\n    value: function(offset, start){\n      var ratio = module.exports.offset.size(start) + offset\n\n      var value = ratio > 0.5 ?\n        Math.max(0, getValueFromScreen((ratio - 0.5) * 2, 0, 0, 20, 'log+', 20)) :\n        (ratio < 0.5) ? -Math.max(0, getValueFromScreen((0.5 - ratio) * 2, 0, 0, 20, 'log+', 20)) : 0\n\n      if (Math.abs(value) > 100){\n        return Math.round(value / 10) * 10\n      } else if (Math.abs(value) > 1){\n        return round(value)\n      } else {\n        return round(value, 2)\n      }\n    },\n    display: function(value){\n      if (value > 0){\n        return '+' + String(round(value, 2))\n      } else {\n        return String(round(value, 2))\n      }\n    }\n  },\n\n  'sampleRatio': {\n    size: function(value){\n      return module.exports.arfo.size(value * 48000)\n    },\n    value: function(offset, start){\n      return module.exports.arfo.value(offset, start * 48000) / 48000\n    },\n    display: function(value){\n      return module.exports.arfo.display(value * 48000)\n    }\n  },\n\n  'bit': {\n    size: function(value){\n      return getRatio(value, 1, 8)\n    },\n    value: function(offset, start){\n      return Math.max(1, Math.round(getValueFromScreen(offset, start, 1, 8)))\n    },\n    display: function(value){\n      return String(value)\n    }\n  },\n\n  'arfo': {\n    size: function(value){\n      return getRatio(value, 20, 20000, 'log')\n    },\n    value: function(offset, start){\n      if (!start){\n        start = 20\n      }\n\n      var value = getValueFromScreen(offset, start, 20, 20000, 'log')\n\n      if (value < 100){\n        return Math.round(value)\n      } else if (value < 1000) {\n        return Math.round(value / 5) * 5\n      } else if (value < 10000) {\n        return Math.round(value / 100) * 100\n      } else {\n        return Math.round(value / 1000) * 1000\n      }\n    },\n    display: function(value){\n      if (value > 1000){\n        return round(value/1000, 2) + ' kHz'\n      } else {\n        return round(value) + ' hz'\n      }\n    }\n  },\n\n  'lfo': {\n    size: function(value){\n      return getRatio(value, 1/24, 24, 'exp', 2)\n    },\n    value: function(offset, start){\n      var value = Math.max(1/24, getValueFromScreen(offset, start, 0, 24, 'exp', 2))\n      return value < 1 ?\n        Math.round(value*24)/24 :\n        value < 2 ?\n          Math.round(value*6)/6 :\n          Math.round(value)\n    },\n    display: function(value){\n      if (value < 1){\n        var f = frac(value, 24)\n        return f[1] + '/' + f[2]\n      } else {\n        return round(value, 2) + ' Hz'\n      }\n    }\n  },\n\n  'beats': {\n    size: function(value){\n      return getRatio(value, 1/24, 24, 'exp', 2)\n    },\n    value: function(offset, start){\n      var value = Math.max(1/24, getValueFromScreen(offset, start, 0, 24, 'exp', 2))\n      return value < 1 ?\n        Math.round(value*24)/24 :\n        value < 2 ?\n          Math.round(value*6)/6 :\n          Math.round(value)\n    },\n    display: function(value){\n      if (value < 1){\n        var f = frac(value, 24)\n        return f[1] + '/' + f[2]\n      } else {\n        return String(round(value, 2))\n      }\n    }\n  },\n\n  'beats2': {\n    size: function(value){\n      return getRatio(value, 0, 32, 'exp')\n    },\n    value: function(offset, start){\n      var value = Math.max(1/24, getValueFromScreen(offset, start, 0, 32, 'exp'))\n      return Math.round(value*12)/12\n    },\n    display: function(value){\n      if (value < 1){\n        var f = frac(value, 24)\n        return f[1] + '/' + f[2]\n      } else {\n        return String(round(value, 2))\n      }\n    }\n  },\n\n  'cents': {\n    size: function(value){\n      return getRatio(value, -100, 100)\n    },\n    value: function(offset, start){\n      return Math.round(getValueFromScreen(offset, start, -100, 100))\n    },\n    display: function(value){\n      if (value > 0){\n        return '+' + String(round(value, 2))\n      } else {\n        return String(round(value, 2))\n      }\n    }\n  },\n\n  'cents+': {\n    size: function(value){\n      return getRatio(value, -600, 600)\n    },\n    value: function(offset, start){\n      return Math.round(getValueFromScreen(offset, start, -600, 600))\n    },\n    display: function(value){\n      if (value > 0){\n        return '+' + String(round(value, 2))\n      } else {\n        return String(round(value, 2))\n      }\n    }\n  },\n\n  'semitoneUp': {\n    size: function(value){\n      return getRatio(value, -24, 60)\n    },\n    value: function(offset, start){\n      return Math.round(getValueFromScreen(offset, start, -24, 60))\n    },\n    display: function(value){\n      if (value > 0){\n        return '+' + String(round(value, 2))\n      } else {\n        return String(round(value, 2))\n      }\n    }\n  },\n\n  'beatOffset': {\n    size: function(value){\n      return getRatio(value, 0, 32)\n    },\n    value: function(offset, start){\n      return Math.round(getValueFromScreen(offset, start, 0, 32))\n    },\n    display: function(value){\n      return String(Math.round(value))\n    }\n  },\n\n  'semitone': {\n    size: function(value){\n      return getRatio(value, -48, 48)\n    },\n    value: function(offset, start){\n      return Math.round(getValueFromScreen(offset, start, -48, 48))\n    },\n    display: function(value){\n      if (value > 0){\n        return '+' + String(round(value, 2))\n      } else {\n        return String(round(value, 2))\n      }\n    }\n  },\n\n  'octave': {\n    size: function(value){\n      return getRatio(value, -6, 6)\n    },\n    value: function(offset, start){\n      return Math.round(getValueFromScreen(offset, start, -6, 6))\n    },\n    display: function(value){\n      if (value > 0){\n        return '+' + String(round(value, 2))\n      } else {\n        return String(round(value, 2))\n      }\n    }\n  },\n\n  'ratio': {\n    size: function(value){\n      return getRatio(value, 0, 2, 'exp')\n    },\n    value: function(offset, start){\n      return Math.max(0, getValueFromScreen(offset, start, 0, 2, 'exp'))\n    },\n    display: function(value){\n      if (value < 1.1){\n        return String(round(value, 3))\n      } else {\n        return String(round(value, 2))\n      }\n    }\n  },\n\n  'ratio1': {\n    size: function(value){\n      return getRatio(value, 0, 1)\n    },\n    value: function(offset, start){\n      return Math.min(Math.max(0, getValueFromScreen(offset, start, 0, 1)), 1)\n    },\n    display: function(value){\n      return String(round(value, 2))\n    }\n  },\n\n  'ratioExp': {\n    size: function(value){\n      return getRatio(value, 0, 32, 'exp', 2)\n    },\n    value: function(offset, start){\n      return Math.max(0, round(getValueFromScreen(offset, start, 0, 32, 'exp', 3), 2))\n    },\n    display: function(value){\n      return String(round(value, 2))\n    }\n  },\n\n  'ratio1Log': {\n    size: function(value){\n      return 1-getRatio(1-value, 0.0001, 1, 'log+', 100)\n    },\n    value: function(offset, start){\n      return Math.max(0, 1-getValueFromScreen(-offset, 1-start, 0.0001, 1, 'log+', 100))\n    },\n    display: function(value){\n      return String(round(value, 3))\n    }\n  },\n\n  'compressionRatio': {\n    size: function(value){\n      return getRatio(value, 1, 20)\n    },\n    value: function(offset, start){\n      return Math.max(1, Math.round(getValueFromScreen(offset, start, 1, 20)))\n    },\n    display: function(value){\n      return String(round(value, 1))\n    }\n  },\n\n  'ratio32': {\n    size: function(value){\n      return getRatio(value, 0, 32)\n    },\n    value: function(offset, start){\n      return Math.max(0, Math.round(getValueFromScreen(offset, start, 0, 32)))\n    },\n    display: function(value){\n      return String(round(value, 0))\n    }\n  },\n\n  'ratio100': {\n    size: function(value){\n      return getRatio(value, 0, 100, 'log+')\n    },\n    value: function(offset, start){\n      return Math.max(0, getValueFromScreen(offset, start, 0, 100, 'log+'))\n    },\n    display: function(value){\n      return String(round(value, 2))\n    }\n  },\n\n  'bigRatio': {\n    size: function(value){\n      return getRatio(value, 0, 10000, 'log+')\n    },\n    value: function(offset, start){\n      return Math.max(0, getValueFromScreen(offset, start, 0, 10000, 'log+'))\n    },\n    display: function(value){\n      return String(round(value, 2))\n    }\n  },\n\n  'ms': {\n    size: function(value){\n      return getRatio(value, 0, 30, 'log+', 20)\n    },\n    value: function(offset, start){\n      var value = Math.max(0, getValueFromScreen(offset, start, 0, 30, 'log+', 20))\n      if (value < 1){\n        return round(value, 3)\n      } else {\n        return round(value, 1)\n      }\n    },\n    display: function(value){\n      if (value >= 1){\n        return round(value,1) + ' s'\n      } else {\n        return round(value*1000) + ' ms'\n      }\n    }\n  },\n\n  'beat': {\n    size: function(value){\n      for (var i=0;i<beatValues.length;i++){\n        if (beatValues[i]>value) break\n      }\n      return getRatio(i, 0, beatValues.length)\n    },\n    value: function(offset, start){\n      for (var i=0;i<beatValues.length;i++){\n        if (beatValues[i] >= start) break\n      }\n\n      var val = Math.round(getValueFromScreen(offset, i, 0, beatValues.length))\n      val = Math.min(Math.max(val, 0), beatValues.length)\n      return beatValues[val]\n    },\n    display: function(value){\n      if (value >= 1){\n        return String(round(value,1))\n      } else {\n        var f = frac(value, 32)\n        return f[1] + '/' + f[2]\n      }\n    }\n  },\n\n  'bpm': {\n    size: function(value){\n      return round(getRatio(value, 50, 180), 2)\n    },\n    value: function(offset, start){\n      return Math.max(0, round(getValueFromScreen(offset, start, 50, 180)))\n    },\n    display: function(value){\n      return round(value, 2) + ' bpm'\n    }\n  }\n}\n\nfunction getRatio(value, min, max, curve, mag){\n\n  mag = mag || 1\n\n  if (curve === 'log'){\n    min = Math.log(min*mag)/Math.log(10)\n    max = Math.log(max*mag)/Math.log(10)\n    value = Math.log(value*mag)/Math.log(10)\n  } else if (curve === 'log+'){\n    min = Math.log(min*mag+1)/Math.log(10)\n    max = Math.log(max*mag+1)/Math.log(10)\n    value = Math.log(value*mag+1)/Math.log(10)\n  } else if (curve === 'db'){\n    min = gainToDecibels(min)\n    max = gainToDecibels(max)\n    value = gainToDecibels(value)\n  } else if (curve === 'exp'){\n    min = Math.pow(min, 1/(2*mag))\n    max = Math.pow(max, 1/(2*mag))\n    value = Math.pow(value, 1/(2*mag))\n  }\n\n  value = value - min\n\n  var range = max - min\n  return value / range\n}\n\nfunction getValueFromScreen(offset, start, min, max, curve, mag){\n  mag = mag || 1\n\n  if (curve === 'log'){\n    min = Math.log(min*mag)/Math.log(10)\n    max = Math.log(max*mag)/Math.log(10)\n    start = Math.log(start*mag)/Math.log(10)\n  } else if (curve === 'log+'){\n    min = Math.log(min*mag+1)/Math.log(10)\n    max = Math.log(max*mag+1)/Math.log(10)\n    start = Math.log(start*mag+1)/Math.log(10)\n  } else if (curve === 'db'){\n    min = Math.max(-40, gainToDecibels(min))\n    max = gainToDecibels(max)\n    start = Math.max(-40, gainToDecibels(start))\n  } else if (curve === 'exp'){\n    min = Math.pow(min, 1/(2*mag))\n    max = Math.pow(max, 1/(2*mag))\n    start = Math.pow(start, 1/(2*mag))\n  }\n\n  start = start - min\n\n  var range = max - min\n  var value = start + (range * offset)\n\n  if (curve === 'log'){\n    value = Math.pow(10, value + min) / mag\n  } else if (curve === 'log+'){\n    value = (Math.pow(10, value + min) - 1) / mag\n  } else if (curve === 'db'){\n    value = decibelsToGain(value + min)\n  } else if (curve === 'exp'){\n    value = Math.pow(value, 2*mag)\n  } else {\n    value += min\n  }\n\n  return value\n}\n\nfunction round(value, dp){\n  var pow = Math.pow(10, dp || 0)\n  return Math.round(value * pow) / pow\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/get-closest-point.js":"module.exports = function getClosestPoint(markers, time) {\n  if (markers && markers.length) {\n    var prev = 0\n    for (var i = 0; i < markers.length; i++) {\n      var marker = markers[i]//-0.02\n      if (time === marker) {\n        return time\n      } else if (marker > time) {\n        var diff = marker - time\n        var prevDiff = time - prev\n        if (diff > prevDiff) {\n          return prev\n        } else {\n          return marker\n        }\n      }\n      prev = marker\n    }\n  }\n  return time\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/get-port-siblings.js":"module.exports = getPortSiblings\n\nfunction getPortSiblings (obs, controllers) {\n  var index = null\n  var matches = []\n  controllers.forEach(function (c, i) {\n    if (c.port && c.port() === obs.port()) {\n      if (c === obs) {\n        index = i\n      }\n      matches.push(i)\n    }\n  })\n  return [\n    controllers.get(matches[mod(index - 1, matches.length)]),\n    controllers.get(matches[mod(index + 1, matches.length)])\n  ]\n}\n\n\nfunction mod (n, m) {\n  return ((n % m) + m) % m\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/get-sound-offset.js":"module.exports = function getSoundOffset(buffer){\n\n  if (!buffer) return\n\n  var threshold = 0.01\n\n  var data = buffer.getChannelData(0)\n  var step = 32\n  var width = buffer.length / step\n\n  for(var i=0;i<width;i++){\n    var min = 1.0\n    var max = -1.0\n    for (j=0; j<step; j++) {\n      var datum = data[(i*step)+j]\n      if (datum < min){\n        min = datum\n      }\n      if (datum > max){\n        max = datum\n      }\n    }\n\n    if (Math.max(Math.abs(min), Math.abs(max)) > threshold){\n      var value = (i*step) / buffer.length\n      return [value, 1]\n    }\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/get-value.js":"module.exports = getValue\n\nfunction getValue(object, defaultValue){\n  if (object instanceof Object && !Array.isArray(object)){\n    return getValue(object.value, defaultValue)\n  } else {\n    return object != null ? object : defaultValue\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/global-controller.js":"var MidiStream = require('midi-stream')\nvar extend = require('xtend')\n\nvar portMatch = [\n  [/$Launch Control/, 'global-controller/launch-control']\n]\n\nvar portChoices = Observ([])\nMidiStream.watchPortNames(function (ports) {\n  obs.portChoices.set(ports.filter(matchPort))\n})\n\n\nfunction GlobalController (context) {\n  var obs = Node(context)\n  obs.portChoices = portChoices\n\n  var lastPortName = null\n  obs(function (data) {\n    if (data && data.port !== lastPortName) {\n      lastPortName = data.port\n      var nodeName = matchPort(data.port)\n      if (nodeName) {\n        obs.set(extend(data, {\n          node: nodeName\n        }))\n      }\n    }\n  })\n\n  return obs\n}\n\nfunction matchPort (name) {\n  for (var i=0;i<portMatch.length;i++) {\n    if (portMatch[i][0].exec(name)) {\n      return portMatch[i][1]\n    }\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/grab-grid.js":"var ArrayGrid = require('array-grid')\n\nmodule.exports = function (grid) {\n\n  var routing = {}\n  var layers = []\n\n  watchGridChanges(grid, function (changes) {\n    var currentValue = grid()\n    var update = {}\n    for (var i = 0; i < changes.length; i++) {\n      var change = changes[i]\n      var index = currentValue.index(change[0], change[1])\n      var value = change[2]\n\n      var lastLayerIndex = layers.indexOf(routing[index])\n      var currentLayerIndex = getLayerFor(index)\n\n      // update last layer\n      if (~lastLayerIndex) {\n        if (!update[lastLayerIndex]) {\n          update[lastLayerIndex] = layers[lastLayerIndex].values.slice()\n        }\n        update[lastLayerIndex][index] = null\n      }\n\n      // update current layer\n      if (value && ~currentLayerIndex) {\n        if (!update[currentLayerIndex]) {\n          update[currentLayerIndex] = layers[currentLayerIndex].values.slice()\n        }\n        update[currentLayerIndex][index] = value\n        routing[index] = layers[currentLayerIndex]\n      }\n    }\n\n    Object.keys(update).forEach(broadcast, {\n      updates: update,\n      layers: layers,\n      shape: currentValue.shape\n    })\n\n  })\n\n  function grab (listener, opts) {\n    var shape = grid().shape\n\n    if (arguments.length === 0) {\n      // make it work with watch\n      return ArrayGrid([], shape)\n    }\n\n    var layer = {\n      listener: listener,\n      values: [],\n      exclude: opts && opts.exclude\n    }\n\n    layers.push(layer)\n\n    return function () {\n      var index = layers.indexOf(layer)\n      if (~index) {\n        layers.splice(index, 1)\n      }\n    }\n  }\n\n  return grab\n\n  // scoped\n\n  function getLayerFor (index) {\n    for (var i = layers.length - 1; i >= 0; i--) {\n      var exclude = resolve(layers[i].exclude)\n      if (!exclude || !~exclude.indexOf(index)) {\n        return i\n      }\n    }\n    return -1\n  }\n}\n\nfunction resolve (val) {\n  return typeof val === 'function' ? val() : val\n}\n\nfunction broadcast (key) {\n  var newData = this.updates[key]\n  var layer = this.layers[key]\n  var shape = this.shape\n  layer.values = newData\n  layer.listener(ArrayGrid(newData, shape))\n}\n\nfunction watchGridChanges(grid, handler) {\n  var lastData = grid() && grid().data || []\n  var remove = grid(function(value){\n    var length = value.shape[0] * value.shape[1]\n    var changes = []\n    for (var i=0; i<length; i++) {\n      if (value.data[i] !== lastData[i]){\n        var coords = value.coordsAt(i)\n        changes.push([coords[0], coords[1], value.data[i]])\n      }\n    }\n    lastData = value.data\n    handler(changes)\n  })\n  return remove\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/grid-slice-peaks.js":"var worker = new Worker('file://' + __dirname + '/worker/peaks.js')\nvar callbacks = {}\nvar nextId = 0\n\nworker.onmessage = function (e) {\n  if (callbacks[e.data.id]) {\n    callbacks[e.data.id](e.data.result)\n    delete callbacks[e.data.id]\n  }\n}\n\nmodule.exports = function (data, count, offset, cb) {\n  var id = nextId++\n  offset = offset || [0, 1]\n\n  var range = (offset[1] - offset[0]) * data.length\n  var windowSize = Math.ceil(range / count)\n  var start = Math.floor(offset[0] * data.length)\n  var end = Math.floor(offset[1] * data.length)\n  var searchStart = Math.floor(start + (windowSize / 2))\n\n  callbacks[id] = function (peaks) {\n    cb([[start, 1]].concat(peaks).map(function (item) {\n      return item[0] / data.length\n    }))\n  }\n\n  worker.postMessage({\n    id: id,\n    data: data,\n    windowSize: windowSize,\n    start: searchStart,\n    end: end\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/h.js":"module.exports = require('micro-css/h')(require('virtual-dom/h'))","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/hold-active-transform.js":"module.exports = function holdActive (input, active) {\n  active.forEach(function(index){\n    input.data[index] = {\n      events: [[0, true]],\n      length: 2\n    }\n  })\n  return input\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/import-sample.js":"var getBase = require('path').basename\nvar getSoundOffset = require('./get-sound-offset.js')\nvar resolveAvailable = require('lib/resolve-available')\nvar copyFile = require('lib/copy-file')\n\nmodule.exports = importSample\n\nfunction importSample (context, filePath, cb) {\n  var fileObject = context.fileObject\n\n  var fileName = getBase(filePath)\n  var from = filePath\n  var to = fileObject.resolvePath('./' + fileName)\n\n  if (from === to) {\n    // already imported\n    console.log('already imported')\n    getInfo(context, fileObject, to, cb)\n  } else {\n    resolveAvailable(to, context.fs, function (err, to) {\n      if (err) return cb && cb(err)\n      copyFile(from, to, context.fs, function () {\n        getInfo(context, fileObject, to, cb)\n      })\n    })\n  }\n}\n\nfunction getInfo (context, fileObject, path, cb) {\n  var relativeSrc = fileObject.relative(path)\n  var obs = context.nodes.AudioBuffer(context)\n\n  obs.resolved(function (buffer) {\n    if (buffer) {\n      cb && cb(null, {\n        buffer: { node: 'AudioBuffer', src: relativeSrc },\n        offset: getSoundOffset(buffer) || [0, 1]\n      })\n\n      // destroy after callback to avoid double decode\n      obs.destroy()\n    }\n  })\n  obs.set({ src: relativeSrc })\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/resolve-available.js":"var getExt = require('path').extname\nvar getBaseName = require('path').basename\nvar getDirName = require('path').dirname\nvar join = require('path').join\n\nmodule.exports = resolveAvailable\n\nfunction resolveAvailable (path, fs, cb) {\n  // check if file exists, \n  // if so increment number and try again\n  // otherwise return path\n\n  var ext = getExt(path)\n  var base = getBaseName(path, ext)\n  var dir = getDirName(path)\n  var numberMatch = /(^.+) ([0-9]+)$/.exec(base)\n\n  fs.exists(path, function(exists){\n    if (exists){\n      if (numberMatch){\n        var number = parseInt(numberMatch[2]) + 1\n        var fileName = numberMatch[1] + ' ' + number + ext\n        resolveAvailable(join(dir, fileName), fs, cb)\n      } else {\n        var fileName = base + ' 1' + ext\n        resolveAvailable(join(dir, fileName), fs, cb)\n      }\n    } else {\n      cb(null, path)\n    }\n  })\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/jsmn.js":"var safeEval = require('notevil')\n\nmodule.exports.parse = function(literal){\n  literal = literal.replace(/\\{\\{([\\w\\W]*?)\\}\\}/g, function(_, exp){\n    return '{$: ' + JSON.stringify(fixIndent(exp)) + '}'\n  })\n  return safeEval('j = {' + literal + '}')\n}\n\nmodule.exports.stringify = function(object){\n  return getObjectContent(object).trim()\n}\n\nmodule.exports.eval = xval\n\nfunction xval(object, context){\n  if (Array.isArray(object)){\n    return object.map(function(x){\n      return xval(x, context)\n    })\n  } else if (object instanceof Object) {\n    if (object.$){\n      return safeEval(object.$, context)\n    } else {\n      var res = {}\n      Object.keys(object).forEach(function(key){\n        res[key] = xval(object[key], context)\n      })\n      return res\n    }\n  } else {\n    return object\n  }\n}\n\nfunction getObjectContent(object){\n  var result = Object.keys(object).map(function(key){\n    return escapeKey(key) + ': ' + getLiteral(object[key])\n  })\n  return smartWrap(result)\n}\n\nvar numberMatch = /^[0-9]/\n\nfunction isNumeric(key){\n  return typeof key === 'string' && !!numberMatch.exec(key)\n}\n\nfunction escapeKey(key){\n  if (~key.indexOf(' ') || ~key.indexOf('\"') || ~key.indexOf('-') || isNumeric(key)){\n    return JSON.stringify(String(key))\n  } else {\n    return key\n  }\n}\n\nfunction getArrayContent(array){\n  var result = array.map(function(obj){\n    return getLiteral(obj)\n  })\n  return smartWrap(result)\n}\n\nfunction smartWrap(array){\n  if (array.join(', ').length>50){\n    return '\\n' + array.join(',\\n') + '\\n'\n  } else {\n    return ' ' + array.join(', ') + ' '\n  }\n}\n\nfunction indent(text){\n  return text.replace(/\\n(.)/g, '\\n  $1')\n}\n\nfunction getLiteral(value){\n  if (!value || typeof value !== 'object'){\n    return JSON.stringify(value)\n  } else if (Array.isArray(value)){\n    return '[' + indent(getArrayContent(value)) + ']'\n  } else if (value && '$' in value){\n    return '{{' + value['$'] + '}}'\n  } else {\n    return '{' + indent(getObjectContent(value)) + '}'\n  }\n}\n\nvar matchStartSpace = /^(\\s+)/\nvar matchNewLineWrapper = /^\\s*\\n|\\n\\s*$/g\n\nfunction fixIndent(text){\n  if (text && ~text.indexOf('\\n')){\n    text = text.replace(matchNewLineWrapper, '')\n    var match = matchStartSpace.exec(text)\n    var indent = match && match[1].length\n    if (indent){\n      text = '\\n' + text.replace(/(^|\\n)(\\s+)/g, function(_, start, spaces){\n        return start + spaces.slice(indent-2)\n      }) + '\\n'\n    }\n  }\n\n  return text\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/keyboard-tempo.js":"module.exports = function (project) {\n  var actions = project.actions\n  var tempo = project.tempo\n  var speed = project.speed\n\n  document.addEventListener('keydown', handleEvent, false)\n  document.addEventListener('keyup', handleEvent, false)\n\n  return function(){\n    document.removeEventListener('keydown', handleEvent, false)\n    document.removeEventListener('keyup', handleEvent, false)\n    tapTempo.removeAllListeners()\n  }\n\n  function handleEvent(e) {\n    var el = document.activeElement\n    if (!el || (!shouldIgnore(el) && el.contentEditable !== 'true')) {\n      var isDown = e.type === 'keydown'\n      if (e.keyCode === 40) { // down arrow\n        if (isDown) {\n          actions.tapTempo()\n        }\n      } else if (e.keyCode === 37) { // left arrow\n        if (isDown) {\n          speed.set(0.95)\n        } else {\n          speed.set(1)\n        }\n      } else if (e.keyCode === 39) { // right arrow\n        if (isDown) {\n          speed.set(1.05)\n        } else {\n          speed.set(1)\n        }\n      } else if (e.keyCode === 38) {\n        if (isDown) {\n          if (speed() > 1) {\n            tempo.set(tempo()+1)\n          } else if (speed() < 1) {\n            tempo.set(tempo()-1)\n          } else {\n            tempo.set(Math.round(tempo()))\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction shouldIgnore(el){\n  return (el.nodeName === 'INPUT' && el.type !== 'range' && el.type !== 'checkbox') || \n          el.nodeName === 'TEXTAREA'\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/map-merge.js":"var watchArray = require('observ-node-array/watch')\nvar watch = require('observ/watch')\n\nfunction MapMerge(collection, key) {\n  var obs = Observ({})\n  var lastMapped = []\n  var changing = false\n\n  watchArray(collection, function (item) {\n    var release = watch(item[key], changed)\n    return function () {\n      release()\n      changed()\n    }\n  })\n\n  function refresh () {\n    if (changing){\n      if (Array.isArray(nodeArray._list)){\n        obs._list = nodeArray._list.map(getValue)\n        obs._raw = rawKeyOrFunction ? nodeArray._list.map(getRawValue) : obs._list\n        obs.set(obs._list.map(resolve))\n      }\n      changing = false\n    }\n  }\n\n  function changed(){\n    if (!changing){\n      nextTick(refresh)\n    }\n    changing = true\n  }\n\n  return obs\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/map-watch-diff-stack.js":"var watch = require('observ/watch')\nmodule.exports = function(values, obs, handler){\n  var stack = []\n  var lastValue = undefined\n  return watch(obs, function(data){\n    data._diff&&Object.keys(data._diff).forEach(function(key){\n      var value = values[key]\n      if (data._diff[key]){\n        stack.push(value)\n      } else {\n        remove(stack, value)\n      }\n    })\n\n    var top = stack[stack.length - 1]\n    if (top !== lastValue) {\n      handler(top || lastValue)\n      lastValue = top\n    }\n  })\n}\n\nfunction remove(array, item){\n  var index = array.indexOf(item)\n  if (~index){\n    array.splice(index, 1)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/menu.js":"var electron = require('electron')\nvar BrowserWindow = electron.BrowserWindow\n\nmodule.exports = [\n  {\n    label: 'Loop Drop',\n    submenu: [\n      {\n        label: 'Services',\n        submenu: []\n      },\n      {\n        type: 'separator'\n      },\n      {\n        label: 'Hide Loop Drop',\n        accelerator: 'Command+H',\n        selector: 'hide:'\n      },\n      {\n        label: 'Hide Others',\n        accelerator: 'Command+Shift+H',\n        selector: 'hideOtherApplications:'\n      },\n      {\n        label: 'Show All',\n        selector: 'unhideAllApplications:'\n      },\n      {\n        type: 'separator'\n      },\n      {\n        label: 'Quit',\n        accelerator: 'Command+Q',\n        click: function() { electron.app.quit(); }\n      },\n    ]\n  },\n  {\n    label: 'Edit',\n    submenu: [\n      {\n        label: 'Undo',\n        accelerator: 'Command+Z',\n        selector: 'undo:'\n      },\n      {\n        label: 'Redo',\n        accelerator: 'Shift+Command+Z',\n        selector: 'redo:'\n      },\n      {\n        type: 'separator'\n      },\n      {\n        label: 'Cut',\n        accelerator: 'Command+X',\n        selector: 'cut:'\n      },\n      {\n        label: 'Copy',\n        accelerator: 'Command+C',\n        selector: 'copy:'\n      },\n      {\n        label: 'Paste',\n        accelerator: 'Command+V',\n        selector: 'paste:'\n      },\n      {\n        label: 'Select All',\n        accelerator: 'Command+A',\n        selector: 'selectAll:'\n      },\n    ]\n  },\n  {\n    label: 'View',\n    submenu: [\n      {\n        label: 'Reload',\n        accelerator: 'Command+R',\n        click: function() { BrowserWindow.getFocusedWindow().reload(); }\n      },\n      {\n        label: 'Toggle DevTools',\n        accelerator: 'Alt+Command+I',\n        click: function() { BrowserWindow.getFocusedWindow().toggleDevTools(); }\n      },\n    ]\n  },\n  {\n    label: 'Window',\n    submenu: [\n      {\n        label: 'Minimize',\n        accelerator: 'Command+M',\n        selector: 'performMiniaturize:'\n      },\n      {\n        label: 'Close',\n        accelerator: 'Command+W',\n        selector: 'performClose:'\n      },\n      {\n        type: 'separator'\n      },\n      {\n        label: 'Bring All to Front',\n        selector: 'arrangeInFront:'\n      },\n    ]\n  },\n  {\n    label: 'Help',\n    submenu: []\n  },\n]\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/midi-port.js":"var Prop = require('observ-default')\n\nvar streamCache = new Map()\nvar stacks = new Map()\n\nmodule.exports = MidiPort\n\nfunction MidiPort (context, onSwitch) {\n  var ports = context.midiPorts\n\n  var obs = Prop()\n  var nextValue = null\n  var settingNext = false\n  obs.override = Prop(false)\n\n  obs.stream = Prop()\n  obs(refresh)\n\n  var listeners = [\n    ports(refresh)\n  ]\n\n  obs.stream.write = function (value) {\n    if (obs.stream()) {\n      obs.stream().write(value)\n    }\n  }\n\n  obs.grab = function () {\n    var stack = stacks.get(obs())\n    if (stack && last(stack) !== obs) {\n      var lastTop = last(stack)\n      if (!lastTop.override()) {\n        var index = stack.indexOf(obs)\n        if (~index) {\n          stack.splice(index, 1)\n        }\n        stack.push(obs)\n        lastTop && lastTop.refresh()\n        refresh()\n      }\n    }\n  }\n\n  obs.refresh = refresh\n\n  obs.next = function () {\n    var stack = stacks.get(obs())\n    if (stack && last(stack) === obs) {\n      stack[0].grab()\n    }\n  }\n\n  obs.previous = function () {\n    var stack = stacks.get(obs())\n    if (stack && last(stack) === obs) {\n      var previous = stack[stack.length - 2]\n      if (previous) {\n        previous.grab()\n      }\n    }\n  }\n\n  obs.destroy = function () {\n    while (listeners.length) {\n      listeners.pop()()\n    }\n    setNextValue(null)\n    var stack = stacks.get(obs())\n    if (stack) {\n      var index = stack.indexOf(obs)\n      if (~index) {\n        stack.splice(index, 1)\n        if (stack.length) {\n          last(stack).refresh()\n        }\n      }\n    }\n  }\n\n  return obs\n\n  // scoped\n\n  function refresh () {\n    var portNames = ports() || []\n    var portName = obs()\n    var exists = !!~portNames.indexOf(portName)\n    if (!streamCache.has(portName) && exists) {\n      streamCache.set(portName, ports.open(portName, {\n        normalizeNotes: true\n      }))\n      stacks.set(portName, [])\n    } else if (streamCache.has(portName) && !exists) {\n      streamCache.get(portName).close()\n      streamCache.delete(portName)\n    }\n    var stack = stacks.get(portName)\n    if (stack && !stack.length) {\n      stack.push(obs)\n    }\n\n    // ensure not in any other stacks\n    Array.from(stacks.values()).filter(v => v !== stack).forEach(function (stack) {\n      var index = stack.indexOf(obs)\n      if (~index) {\n        stack.splice(index, 1)\n        if (stack.length) {\n          last(stack).refresh()\n        }\n      }\n    })\n\n    if (exists && last(stack) === obs) {\n      setNextValue(streamCache.get(portName))\n    } else {\n      setNextValue(null)\n    }\n  }\n\n  function setNextValue (value) {\n    if (settingNext && nextValue !== value || value !== obs.stream()) {\n      onSwitch && onSwitch(value, obs.stream())\n      nextValue = value\n      if (!settingNext) {\n        settingNext = true\n        setImmediate(function () {\n          obs.stream.set(nextValue)\n          settingNext = false\n        })\n      }\n    }\n  }\n}\n\nfunction last (array) {\n  return array[array.length - 1]\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/midi-to-param.js":"var Transform = require('audio-slot-param/transform')\nvar ObservStruct = require('observ-struct')\nvar Observ = require('observ')\nvar Event = require('geval')\n\nmodule.exports = MidiToParam\n\nfunction MidiToParam(context, id, value) {\n  var obs = ObservStruct({\n    id: Observ(id)\n  })\n\n  obs._type = 'RemoteParam'\n\n  var output = Transform(context, [\n    { param: value },\n    { value: 128, transform: divide }\n  ])\n\n  obs.onSchedule = smooth(output.onSchedule)\n  obs.getValueAt = output.getValueAt\n  obs.destroy = output.destroy\n\n  return obs\n}\n\nfunction smooth (ev) {\n  return Event(function (broadcast) {\n    ev(function (value) {\n      value.duration = 0.1\n      value.mode = 'log'\n      broadcast(value)\n    })\n  })\n}\n\nfunction divide(a,b) {\n  return a / b\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/mouse-drag-event.js":"var Delegator = require('dom-delegator')\n\nvar delegator = Delegator()\ndelegator.listenTo('mousemove')\n\nmodule.exports = function(fn, data, opts){\n  var handler = {\n    fn: fn,\n    data: data || {},\n    opts: opts || {},\n    handleEvent: handle\n  }\n  return handler;\n}\n\nfunction handle(ev){\n\n  if (ev.type === 'mousedown') {\n\n    ev.preventDefault()\n    delegator.addGlobalEventListener('mousemove', this)\n    delegator.addGlobalEventListener('mouseup', this)\n\n    this.target = ev.target\n    this.startX = ev.clientX\n    this.startY = ev.clientY\n\n  } else if (ev.type === 'mouseup') {\n    delegator.removeGlobalEventListener('mousemove', this)\n    delegator.removeGlobalEventListener('mouseup', this)\n  }\n\n  this.fn({\n    x: ev.clientX,\n    y: ev.clientY,\n    offsetX: ev.clientX - this.startX,\n    offsetY: ev.clientY - this.startY,\n    altKey: ev.altKey,\n    ctrlKey: ev.ctrlKey,\n    shiftKey: ev.shiftKey,\n    type: ev.type,\n    target: this.target,\n    currentTarget: ev.currentTarget\n  })\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/mouse-position-event.js":"var BaseEvent = require('value-event/base-event')\nvar Delegator = require('dom-delegator')\nvar DataSet = require('data-set')\n\nvar delegator = Delegator()\ndelegator.listenTo('dragstart')\ndelegator.listenTo('dragend')\ndelegator.listenTo('dragover')\ndelegator.listenTo('dragenter')\ndelegator.listenTo('dragleave')\ndelegator.listenTo('drop')\n\nmodule.exports = BaseEvent(function(ev, broadcast){\n  var event = ev._rawEvent\n  var box = ev.currentTarget.getBoundingClientRect()\n  broadcast({\n    x: event.clientX,\n    y: event.clientY,\n    offsetWidth: ev.currentTarget.offsetWidth,\n    offsetHeight: ev.currentTarget.offsetHeight,\n    offsetX: event.clientX - box.left,\n    offsetY: event.clientY - box.top,\n    dataTransfer: event.dataTransfer,\n    currentTarget: ev.currentTarget,\n\n    ctrlKey: event.ctrlKey,\n    shiftKey: event.shiftKey,\n    altKey: event.altKey,\n    metaKey: event.metaKey,\n\n    event: ev,\n    target: event.target,\n    data: this.data\n  })\n})","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/no-drop.js":"module.exports = function(el){\n  el.addEventListener('dragover', function(e){\n    e.preventDefault()\n    e.dataTransfer.dropEffect = 'none'\n  }, true)\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/observ-class-hook.js":"var watch = require('observ/watch')\nvar nextTick = require('next-tick')\n\nmodule.exports = ObservClassHook\n\nfunction ObservClassHook(obs, className){\n  if (!(this instanceof ObservClassHook)) return new ObservClassHook(obs, className)\n  this.obs = obs\n  this.className = className\n}\n\nfunction update(className, value){\n  var node = this\n  if (value) {\n    node.classList.add(className)\n  } else {\n    node.classList.remove(className)\n  }\n}\n\nObservClassHook.prototype.hook = function(node, prop, prev){\n  var self = this\n  if (!prev || prev.obs !== self.obs){\n    self.removeListener && self.removeListener()\n    if (self.obs){\n      nextTick(function(){\n        self.removeListener = watch(self.obs, update.bind(node, self.className))\n      })\n    }\n  }\n}\n\nObservClassHook.prototype.unhook = function(node, prop, next){\n  if (next){\n    next.removeListener = this.removeListener\n  } else {\n    this.removeListener && this.removeListener()\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/observ-keys.js":"var ObservStruct = require('observ-struct')\nvar Observ = require('observ')\nvar watch = require('observ/watch')\n\nmodule.exports = ObservKeys\n\nfunction ObservKeys (obs, mapping) {\n  var keys = Object.keys(mapping)\n  var lookup = keys.reduce(function (result, key) {\n    if (Array.isArray(mapping[key])) {\n      mapping[key].forEach(function (k) {\n        result[k] = key\n      })\n    } else {\n      result[mapping[key]] = key\n    }\n    return result\n  }, {})\n\n  var obj = keys.reduce(function (result, key) {\n    result[key] = Observ(null)\n    return result\n  }, {})\n\n  var struct = ObservStruct(obj)\n\n  watch(obs, function (down) {\n    struct.set(down.reduce(function (result, code) {\n      var key = lookup[code]\n      if (key !== null) result[key] = true\n      return result\n    }, {}))\n  })\n\n  return struct\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/observ-style-hook.js":"var watch = require('observ/watch')\nvar nextTick = require('next-tick')\n\nmodule.exports = ObservStyleHook\n\nfunction ObservStyleHook(obs, prop, getValue){\n  if (!(this instanceof ObservStyleHook)) return new ObservStyleHook(obs, prop, getValue)\n  this.obs = obs\n  this.prop = prop\n  this.getValue = getValue\n}\n\nfunction update(prop, getValue, value){\n  var node = this\n  node.style[prop] = getValue ? getValue(value) : value\n}\n\nObservStyleHook.prototype.hook = function(node, prop, prev){\n  var self = this\n  if (typeof self.obs === 'function') {\n    update.call(node, self.prop, self.getValue, self.obs())\n  }\n  if (!prev || prev.obs !== self.obs){\n    self.removeListener && self.removeListener()\n    if (self.obs){\n      nextTick(function(){\n        self.removeListener = watch(self.obs, update.bind(node, self.prop, self.getValue))\n      })\n    }\n  }\n}\n\nObservStyleHook.prototype.unhook = function(node, prop, next){\n  node.style[this.prop] = ''\n  if (next){\n    next.removeListener = this.removeListener\n  } else {\n    this.removeListener && this.removeListener()\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/observ-value-hook.js":"var watch = require('observ/watch')\nvar nextTick = require('next-tick')\n\nmodule.exports = ObservValueHook\n\nfunction ObservValueHook(obs, getValue){\n  if (!(this instanceof ObservValueHook)) return new ObservValueHook(obs, getValue)\n  this.obs = obs\n  this.getValue = getValue\n}\n\nfunction update(prop, getValue, value){\n  var node = this\n  node[prop] = getValue ? getValue(value) : value\n}\n\nObservValueHook.prototype.handleEvent = function (e) {\n  this.obs.set(parseFloat(e.currentTarget.value||0))\n}\n\nObservValueHook.prototype.hook = function(node, prop, prev){\n  var self = this\n  node.addEventListener('input', this)  \n  if (!prev || prev.obs !== self.obs){\n    self.removeListener && self.removeListener()\n    if (self.obs){\n      nextTick(function(){\n        self.removeListener = watch(self.obs, update.bind(node, prop, self.getValue))\n      })\n    }\n  }\n}\n\nObservValueHook.prototype.unhook = function(node, prop, next){\n  node.removeEventListener('input', this)\n  if (next){\n    next.removeListener = this.removeListener\n  } else {\n    this.removeListener && this.removeListener()\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/on-trigger.js":"var Event = require('geval')\n\nmodule.exports = function (items) {\n  return Event(function(broadcast) {\n    var releases = []\n    items(rebind)\n\n    function rebind () {\n      while (releases.length) {\n        releases.pop()()\n      }\n\n      items.forEach(function(item, i) {\n        if (item && item.node && item.node.onTrigger) {\n          releases.push(item.node.onTrigger(function(data) {\n            if (data.event === 'start') {\n              broadcast(i)\n            }\n          }))\n        }\n      })\n    }\n  })\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/query-param.js":"var jsonQuery = require('json-query')\n\nmodule.exports = QueryParam\n\nfunction QueryParam(target, query, defaultValue){\n  if (!(this instanceof QueryParam)) return new QueryParam(target, query, defaultValue)\n  this.target = target\n  this.query = query\n  this.defaultValue = defaultValue\n  this.context = target.context\n}\n\nQueryParam.prototype.type = 'QueryParam'\n\nQueryParam.prototype.write = QueryParam.prototype.set =function(value){\n  var newObject = obtain(read(this.target))\n  \n  var res = jsonQuery(this.query, {data: newObject, force: this.defaultValue})\n  var obj = jsonQuery.lastParent(res)\n\n  if (obj){\n    if (value === undefined){\n      delete obj[res.key]\n    } else {\n      obj[res.key] = value\n    }\n    this.target.set(newObject)\n    return true\n  } else {\n    return false\n  }\n}\n\nQueryParam.prototype.read = function(){\n  var res = jsonQuery(this.query, {data: read(this.target)})\n\n  // fallback to inner value\n  res = res.value === undefined && this.target.node ?\n    jsonQuery(this.query, {data: read(this.target.node)}) : res\n\n  return res.value === undefined ? this.defaultValue : res.value\n}\n\nfunction obtain(obj){\n  return JSON.parse(JSON.stringify(obj))\n}\n\nfunction read(target){\n  if (typeof target === 'function'){\n    return target()\n  } else if (target && target.read){\n    return target.read()\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/random-color.js":"module.exports = randomColor\nfunction randomColor(mix){\n  var red = Math.random()*256\n  var green = Math.random()*256\n  var blue = Math.random()*256\n  if (mix != null) {\n    red = (red + mix[0]) / 2\n    green = (green + mix[1]) / 2\n    blue = (blue + mix[2]) / 2\n  }\n  return [Math.floor(red),Math.floor(green),Math.floor(blue)]\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/rename-hook.js":"var QueryParam = require('lib/query-param')\n\nmodule.exports = RenameHook\n\nvar lookup = new WeakMap()\nvar renaming = null\n\nfunction RenameHook (obs, options) {\n  if (!(this instanceof RenameHook)) return new RenameHook(obs, options)\n  this.enabled = options.enabled\n  this.onChange = options.onChange\n  this.object = obs\n  lookup.set(obs, this)\n}\n\nRenameHook.prototype.hook = function (node, prop, current) {\n  if (current) {\n    node.textContent = QueryParam(this.object, 'id').read()\n    this.listener = current.listener\n    this.listener.hook = this\n  } else {\n    this.listener = {\n      handleEvent: handleEvent,\n      hook: this\n    }\n    node.textContent = QueryParam(this.object, 'id').read()\n    node.addEventListener('mouseup', this.listener, true)\n    node.addEventListener('dblclick', this.listener, true)\n    node.addEventListener('blur', this.listener, true)\n    node.addEventListener('keydown', this.listener, true)\n  }\n\n  this.node = node\n}\n\nRenameHook.prototype.unhook = function (node, prop, next) {\n  if (!next) {\n    node.removeEventListener('mouseup', this.listener, true)\n    node.removeEventListener('dblclick', this.listener, true)\n    node.removeEventListener('blur', this.listener, true)\n    node.removeEventListener('keydown', this.listener, true)\n  }\n}\n\nRenameHook.prototype.rename = function (cb) {\n  if (renaming !== this.object && resolve(this.enabled)) {\n    this.node.contentEditable = true\n    renaming = this.object\n\n    var id = QueryParam(this.object, 'id')\n    this.node.textContent = id.read()\n    selectInside(this.node)\n  }\n}\n\nRenameHook.prototype.save = function () {\n  if (renaming === this.object) {\n    var context = this.object.context\n    var id = QueryParam(this.object, 'id')\n    this.lastValue = id.read()\n    this.value = this.node.textContent.trim()\n\n    this.node.contentEditable = false\n    clearSelection()\n\n    if (this.value !== this.lastValue) {\n      if (context && context.collection && context.collection.resolveAvailable) {\n        this.value = context.collection.resolveAvailable(this.value)\n      }\n\n      id.set(this.value)\n\n      if (this.onChange) {\n        this.onChange(this.lastValue, this.value, this.object)\n      }\n    }\n\n    renaming = null\n  }\n}\n\nRenameHook.prototype.cancel = function () {\n  if (renaming === this.object) {\n    this.node.textContent = QueryParam(this.object, 'id').read()\n    this.node.contentEditable = false\n    clearSelection()\n    renaming = null\n  }\n}\n\nRenameHook.rename = function (obs, cb) {\n  setTimeout(function () {\n    var hook = lookup.get(obs)\n    if (hook) {\n      hook.rename(cb)\n    }\n  }, 50)\n}\n\nRenameHook.save = function (obs) {\n  var hook = RenameHook.get(obs)\n  if (hook) {\n    hook.save()\n  }\n}\n\nRenameHook.cancel = function (obs) {\n  var hook = RenameHook.get(obs)\n  if (hook) {\n    hook.save()\n  }\n}\n\nRenameHook.get = function (obs) {\n  if (obs) {\n    return lookup.get(obs)\n  } else if (renaming) {\n    return lookup.get(renaming)\n  }\n}\n\nfunction handleEvent (e) {\n  var hook = this.hook\n  if (hook) {\n    if (e.type === 'mouseup') {\n      hook.rename()\n    } else if (e.type === 'dblclick') {\n      e.stopPropagation()\n    } else if (e.type === 'keydown') {\n      if (e.keyCode === 13) { // enter\n        hook.save()\n        e.preventDefault()\n      } else if (e.keyCode === 27) { // esc\n        hook.cancel()\n      }\n    } else if (e.type === 'blur') {\n      hook.save()\n    }\n  }\n}\n\nfunction selectInside (element) {\n  var range = document.createRange()\n  range.selectNodeContents(element)\n  var sel = window.getSelection()\n  sel.removeAllRanges()\n  sel.addRange(range)\n}\n\nfunction clearSelection () {\n  var sel = window.getSelection()\n  sel.removeAllRanges()\n}\n\nfunction resolve (val) {\n  return typeof val === 'function' ? val() : val\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/rename-widget.js":"var getBaseName = require('path').basename\nvar getExtName = require('path').extname\n\nvar nextTick = require('next-tick')\n\nfunction renameElement(fileName, saveRename, cancelRename, data){ \n  if (!(this instanceof renameElement)) return new renameElement(fileName, saveRename, cancelRename, data) \n  this.fileName = fileName\n  this.saveRename = saveRename\n  this.cancelRename = cancelRename\n  this.data = data\n}\nrenameElement.prototype.type = 'Widget'\nrenameElement.prototype.init = function(){\n  var element = document.createElement('span')\n  this.element = element\n  element.context = this\n  element.dataset.extname = getExtName(this.fileName)\n  element.textContent = getBaseName(this.fileName, element.dataset.extname)\n  element.onkeydown = function(e){\n    if (event.keyCode === 13){\n      save()\n      return false\n    } else if (event.keyCode === 27){\n      element.context.cancelRename()\n      return false\n    }\n  }\n  element.onblur = function handleRenameBlur(e){\n    nextTick(function(){\n      if (element.parentNode && element.context){\n        // only save if still active!\n        save()\n      }\n    })\n  }\n  element.contentEditable = true\n  nextTick(function(){\n    selectInside(element)\n  })\n\n  function save () {\n    if (element.context.getValue() !== element.context.fileName) {\n      element.context.saveRename()\n    } else {\n      element.context.cancelRename()\n    }\n  }\n\n  return element\n}\nrenameElement.prototype.getValue = function(){\n  return this.element.textContent.trim() + this.element.dataset.extname\n}\nrenameElement.prototype.update = function(prev, element){\n  element.context = this\n  this.element = element\n}\n\nfunction selectInside(element){\n  var range = document.createRange();\n  range.selectNodeContents(element);\n  var sel = window.getSelection();\n  sel.removeAllRanges();\n  sel.addRange(range)\n}\n\nmodule.exports = renameElement","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/render-node.js":"var h = require('lib/h')\nvar Thunk = require('vdom-thunk')\n\nmodule.exports = function (node) {\n  if (node && node() && node().node && node.context && node.context.nodeInfo) {\n    var lookup = node.context.nodeInfo.lookup\n    var info = lookup[node().node]\n\n    if (info.render) {\n      var args = []\n      if (info.render.getInvalidationArgs) {\n        args = info.render.getInvalidationArgs(node)\n      }\n      return Thunk(info.render, node, resolve(node), resolve(node.resolved), ...args)\n    }\n  }\n\n  console.log('unknown node', node && node())\n  return h('UnknownNode')\n}\n\nfunction resolve (val) {\n  return typeof val === 'function' ? val() : val\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/scale-interpolate.js":"module.exports = scaleInterpolate\n\nfunction scaleInterpolate (currentValue, toValue, state) {\n  var difference = absDifference(currentValue, toValue)\n  if (difference != null && difference > 3 && (!state.lastSync || Date.now() - state.lastSync > 50)) {\n    if (state.interpolatingFrom == null) {\n      state.interpolatingFrom = toValue\n    }\n    if (absDifference(state.interpolatingFrom, currentValue) < difference) {\n      if (currentValue <= 0) {\n        toValue = 1\n      } else {\n        toValue = toValue / state.interpolatingFrom * currentValue\n      }\n    } else {\n      state.interpolatingFrom = toValue\n      toValue = currentValue\n    }\n    state.lastSync = null\n  } else {\n    state.interpolatingFrom = null\n    state.lastSync = Date.now()\n  }\n\n  return toValue\n}\n\nfunction absDifference (a, b) {\n  if (a != null && b != null) {\n    return Math.abs(a - b)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/session-recorder.js":"var WaveStream = require('wav/lib/writer')\nvar TimeStream = require('lib/time-stream')\nvar TimeOutputStream = require('lib/time-output-stream')\nvar AudioBufferStream = require('audio-buffer-stream')\n\nvar ObservStruct = require('observ-struct')\nvar Observ = require('observ')\nvar join = require('path').join\nvar mkdirp = require('mkdirp')\nvar strftime = require('strftime')\n\nvar resolveAvailable = require('lib/resolve-available')\nvar writeHeader = require('lib/write-header')\n\nconst MB = 1024 * 1024\n\nmodule.exports = SessionRecorder\n\nfunction SessionRecorder (context) {\n  var obs = ObservStruct({\n    recording: Observ(false)\n  })\n\n  var chunkLength = 256\n  var minPreroll = 2 * MB\n\n  var audioStream = AudioBufferStream({\n    sampleRate: context.audio.sampleRate,\n    silenceDuration: 2, // disabled when recording\n    chunkLength: chunkLength,\n    channels: 2,\n    bitDepth: 32\n  })\n\n  var timeStream = TimeStream(context, audioStream, {\n    chunkLength: chunkLength\n  })\n\n  obs.input = context.audio.createScriptProcessor(4096)\n  obs.input.connect(context.audio.destination)\n  obs.input.onaudioprocess = function (e) {\n    audioStream.write(e.inputBuffer)\n  }\n\n  var prerollWavPath = join(context.cwd, 'preroll.wav')\n  var currentOutput = null\n  var currentTimeOutput = null\n  var lastValue = false\n\n  obs.recording(function (val) {\n    if (val !== lastValue) {\n      lastValue = val\n      if (val) {\n        startRecording()\n      } else {\n        stopRecording()\n      }\n    }\n  })\n\n  obs.recordingPath = Observ()\n\n  switchOutput(prerollWavPath)\n  return obs\n\n  // scoped\n\n  function startRecording () {\n    var recordingsPath = join(context.cwd, '~recordings')\n    var date = new Date()\n    var name = strftime('%F %H%M') // YY-MM-DD HHMM\n    resolveAvailable(join(recordingsPath, name), context.fs, function (err, path) {\n      if (err) throw err\n      mkdirp(path, { fs: context.fs }, function (err) {\n        if (err) throw err\n        obs.recordingPath.set(path)\n        var fileName = Date.now() + '.wav'\n        var wavePath = join(path, fileName)\n        var indexPath = join(path, 'index.json')\n        switchOutput(wavePath, function () {\n          audioStream.setSilenceDuration(null)\n          movePreroll(path, function (prerollFileName) {\n            createRecording(indexPath, prerollFileName, fileName)\n          })\n        })\n      })\n    })\n  }\n\n  function stopRecording () {\n    obs.recordingPath.set(null)\n    switchOutput(prerollWavPath)\n    audioStream.setSilenceDuration(2)\n  }\n\n  function movePreroll (path, cb) {\n    var fileName = 'preroll-' + Date.now() + '.wav'\n    var filePath = join(path, fileName)\n    context.fs.stat(prerollWavPath, function (err, stats) {\n      if (!err && stats && stats.size > minPreroll) {\n        context.fs.rename(prerollWavPath, filePath, function (err) {\n          if (err) return cb && cb(null)\n          context.fs.rename(prerollWavPath + '.time', filePath + '.time', function () {\n            cb && cb(fileName)\n          })\n        })\n      } else {\n        cb && cb(null)\n      }\n    })\n  }\n\n  function createRecording (path, prerollFileName, fileName) {\n    var clips = []\n\n    if (prerollFileName) {\n      clips.push({\n        flags: ['preroll'],\n        node: 'timeline/clip',\n        src: './' + prerollFileName\n      })\n    }\n\n    if (fileName) {\n      clips.push({ node: 'timeline/clip', src: './' + fileName })\n    }\n\n    var data = JSON.stringify({\n      node: 'recording',\n      timeline: {\n        node: 'timeline',\n        primary: clips\n      }\n    })\n\n    context.fs.writeFile(path, data, function () {\n      // ensure refresh\n      context.project.recordingEntries.refresh()\n    })\n  }\n\n  function switchOutput (path, cb) {\n    if (currentOutput) {\n      if (cb) {\n        currentOutput.on('finish', cb)\n      }\n      audioStream.unpipe(currentOutput)\n      timeStream.unpipe(currentTimeOutput)\n      currentOutput.end()\n      currentTimeOutput.end()\n    } else {\n      cb && setImmediate(cb)\n    }\n\n    if (path) {\n      var output = context.fs.createWriteStream(path)\n      var timeOutput = context.fs.createWriteStream(path + '.time')\n      currentTimeOutput = TimeOutputStream(-timeStream.getCurrentTime())\n      currentOutput = WaveStream({\n        sampleRate: context.sampleRate,\n        bitDepth: 32,\n        channels: 2,\n        format: 3\n      })\n      currentOutput.on('header', function (header) {\n        writeHeader(path, header, context.fs)\n      })\n      timeStream.pipe(currentTimeOutput).pipe(timeOutput)\n      audioStream.pipe(currentOutput).pipe(output)\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/time-stream.js":"var Readable = require('stream').Readable\n\nmodule.exports = TimeStream\n\nfunction TimeStream (context, audioStream, opts) {\n  // time stamps\n  var timeStream = new Readable({objectMode: true})\n  var chunkLength = opts && opts.chunkLength || 256\n  var startAt = context.audio.currentTime\n  var chunkDuration = chunkLength / context.audio.sampleRate\n  var timeChunks = {}\n  var timeOffset = -0.02\n  var releaseSchedule = context.scheduler.onSchedule(function(data) {\n    var from = Math.floor(data.from * 2) / 2\n    var to = Math.floor(data.to * 2) / 2\n    var hasCue = to - from\n    if (hasCue) {\n      var time = context.scheduler.getTimeAt(data.to) - startAt\n      var chunk = Math.floor(time / chunkDuration)\n      timeChunks[chunk] = time\n    }\n  })\n\n  timeStream._read = function () {}\n  timeStream.on('end', function () {\n    releaseSchedule()\n  })\n  timeStream.getCurrentTime = function () {\n    return context.audio.currentTime - startAt + timeOffset\n  }\n\n  audioStream.on('chunk', function (id, written) {\n    if (written) {\n      if (timeChunks[id] != null) {\n        timeStream.push(timeChunks[id] + timeOffset)\n        timeStream.lastValue = timeChunks[id] + timeOffset\n      }\n    } else {\n      timeOffset -= chunkDuration\n    }\n  })\n  audioStream.on('end', function () {\n    timeStream.push(null)\n  })\n  return timeStream\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/time-output-stream.js":"var Transform = require('stream').Transform\n\nmodule.exports = TimeOutputStream\n\nfunction TimeOutputStream (offset) {\n  offset = offset || 0\n  var stream = Transform({ writableObjectMode: true })\n  stream._transform = function (data, enc, done) {\n    done(null, floatBuffer(data + offset))\n  }\n  return stream\n}\n\nfunction floatBuffer(value) {\n  var buffer = new Buffer(4)\n  buffer.writeFloatLE(value, 0)\n  return buffer\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/write-header.js":"module.exports = function writeHeader(path, header, fs, cb) {\n  cb = cb || function (err) {\n    if (err) throw err\n  }\n\n  var stream = fs.createWriteStream(path, {\n    start: 0,\n    flags: 'r+'\n  })\n\n  stream.on('error', cb)\n  stream.on('finish', cb)\n  stream.write(header)\n  stream.end()\n} \n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/set-mapped-value.js":"var watch = require('observ/watch')\nmodule.exports = function(values, obs, target){\n  var lastValue = undefined\n  return watch(obs, function(data){\n    for (var i=values.length-1;i>=0;i--) {\n      if (data[i]) {\n        if (target() !== values[i]) {\n          target.set(values[i])\n        }\n        break\n      }\n    }\n  })\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/set-route.js":"var QueryParam = require('lib/query-param')\n\nmodule.exports = function setRoute(node, id, value) {\n  if (node.routes) {\n    node.routes.put(id, value)\n  } else {\n    QueryParam(node, ['routes[?]', id], {}).set(value)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/spawn-node.js":"var rename = require('lib/rename-hook').rename\nvar resolveAvailable = require('lib/resolve-available')\nvar extend = require('xtend')\nvar getBaseName = require('path').basename\n\nmodule.exports = function (collection, nodeName, index, cb) {\n\n  if (typeof index === 'function') {\n    cb = index\n    index = null\n  }\n\n  if (index == null) {\n    index = collection.getLength()\n  }\n\n  var context = collection.context\n  var fileObject = context.fileObject\n  var lookup = context.nodeInfo.lookup\n  var info = lookup[nodeName]\n  if (info) {\n    var name = 'New ' + (info.name || 'Node')\n    var descriptor = (typeof info.spawn === 'function') ?\n      info.spawn(context) : info.spawn\n\n    if (info.external) {\n      var path = fileObject.resolvePath(name + '.json')\n      var externalDescriptor = (typeof info.external === 'function') ?\n        info.external(context) : info.external\n      externalDescriptor = extend({ node: nodeName }, externalDescriptor)\n\n      resolveAvailable(path, context.fs, function (err, path) {\n        context.fs.writeFile(path, JSON.stringify(externalDescriptor), function(err){\n          if (err) return cb&&cb(err)\n          var id = collection.resolveAvailable(getBaseName(path, '.json'))\n          var finalDescriptor = extend({\n            node: 'external',\n            src: fileObject.relative(path),\n            id: id,\n            scale: '$global',\n            routes: {output: '$default'}\n          }, descriptor)\n\n          var node = collection.insert(finalDescriptor, index)\n          cb && cb(null, node)\n        })\n      })\n    } else {\n      var finalDescriptor = extend({\n        node: nodeName\n      }, descriptor)\n\n      if (collection.resolveAvailable) {\n        finalDescriptor.id = collection.resolveAvailable(name)\n      }\n\n      var node = collection.insert(finalDescriptor, index)\n      cb && cb(null, node)\n    }\n  } else {\n    cb && cb(new Error('No node exists with specified name.'))\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/stream-observ.js":"var Observ = require('observ')\nmodule.exports = function(stream){\n  var obs = Observ()\n  stream.on('data', obs.set)\n  return obs\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/sub-loop.js":"var VirtualDom = require('virtual-dom')\nvar MainLoop = require('main-loop')\nvar createElement = require('virtual-dom/create-element')\nvar h = require('micro-css/h')(require('virtual-dom/h'))\nvar shallowEq = require('vdom-thunk/shallow-eq')\n\nmodule.exports = SubLoop\n\nfunction SubLoop (observ, render) {\n  if (!(this instanceof SubLoop)) return new SubLoop(observ, render)\n  this.observ = observ\n  this.render = render\n  this.releases = []\n}\n\nSubLoop.prototype.type = 'Widget'\n\nSubLoop.prototype.init = function () {\n  while (this.releases.length) {\n    this.releases.pop()()\n  }\n\n  if (typeof this.render === 'function') {\n    var observs = Array.isArray(this.observ) ? this.observ : [ this.observ ]\n    var loop = MainLoop(null, () => { return this.render(...observs) }, VirtualDom)\n    observs.forEach((obs) => typeof obs === 'function' && this.releases.push(obs(loop.update)))\n    return loop.target\n  } else {\n    return createElement(h('div'))\n  }\n}\n\nSubLoop.prototype.update = function (prev, elem) {\n  this.releases = prev.releases\n  if (!eq(this.observ, prev.observ) || this.render !== prev.render) {\n    return this.init()\n  }\n}\n\nSubLoop.prototype.destroy = function (prev, elem) {\n  while (this.releases.length) {\n    this.releases.pop()()\n  }\n}\n\nfunction eq (a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return shallowEq(a, b)\n  } else {\n    return a === b\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/update-param-references.js":"module.exports = updateParamReferences\n\nfunction updateParamReferences (node, oldId, newId) {\n  var changed = false\n  var result = JSON.stringify(node(), function (key, value) {\n    if (value && value.node === 'linkParam' && value.param === oldId) {\n      changed = true\n      if (newId) {\n        value.param = newId\n      } else {\n        return value.minValue\n      }\n    }\n    return value\n  })\n\n  if (changed) {\n    node.set(JSON.parse(result))\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/value-event.js":"module.exports = ValueEventHandler\n\nfunction ValueEventHandler(fn, attribute, data) {\n  return {\n    fn: fn,\n    data: data,\n    attribute: attribute || 'value',\n    handleEvent: handleEvent\n  }\n}\n\nfunction handleEvent(ev) {\n  var value = ev.currentTarget[this.attribute]\n  this.fn(value)\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/watch-buttons.js":"module.exports = watchButtons\n\nfunction watchButtons(buttons, handlers){\n  var removeListeners = Object.keys(handlers).map(watch, {buttons: buttons, handlers: handlers})\n  return function unwatch(){\n    removeListeners.forEach(invoke)\n    removeListeners.length = 0\n  }\n}\n\nfunction watch(key){\n  var button = this.buttons[key]\n  var handler = this.handlers[key]\n  if (typeof button === 'function' && typeof handler === 'function'){\n    return button(handler.bind(button))\n  }\n}\n\nfunction invoke(fn){\n  if (typeof fn === 'function'){\n    return fn()\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/watch-knobs.js":"var watch = require('observ/watch')\n\nmodule.exports = watchKnobs\n\nfunction watchKnobs (stream, keys, listener, defaultValue) {\n  var currentStream = null\n  var release = watch(stream, set)\n  var currentValues = []\n  var broadcastedValues = []\n  var broadcastedAt = []\n  var lastChangeAt = []\n  var throttling = []\n  var timers = []\n  var minDelay = 10\n\n  return function () {\n    release && release()\n    currentStream && currentStream.removeListener('data', handler)\n  }\n  // scoped\n\n  function handler (message) {\n    var key = message[0] + '/' + message[1]\n    var index = keys.indexOf(key)\n    if (~index) {\n      broadcast(index, message[2])\n    }\n  }\n\n  function broadcast (index, value) {\n    currentValues[index] = value\n    if (!throttling[index]) {\n      if (Date.now() - lastChangeAt[index] > minDelay) {\n        broadcastNow(index, value)\n      } else {\n        throttling[index] = true\n        timers[index] = setInterval(function () {\n          broadcastNow(index, currentValues[index])\n        }, minDelay)\n      }\n    }\n    lastChangeAt[index] = Date.now()\n  }\n\n  function broadcastNow (index, value) {\n    broadcastedAt[index] = Date.now()\n\n    if (broadcastedValues[index] !== value) {\n      broadcastedValues[index] = value\n      listener(index, value)\n    }\n\n    if (throttling[index] && broadcastedAt[index] - lastChangeAt[index] > minDelay) {\n      throttling[index] = false\n      clearInterval(timers[index])\n    }\n  }\n\n  function set (newStream) {\n    currentStream && currentStream.removeListener('data', handler)\n    newStream && newStream.on('data', handler)\n    currentStream = newStream\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/watch-struct.js":"module.exports = watchStruct\n\nfunction watchStruct(struct, handlers){\n  var removeListeners = Object.keys(handlers).map(watch, {struct: struct, handlers: handlers})\n  return function unwatch(){\n    removeListeners.forEach(invoke)\n    removeListeners.length = 0\n  }\n}\n\nfunction watch(key){\n  var obs = this.struct[key]\n  var handler = this.handlers[key]\n  if (typeof obs === 'function' && typeof handler === 'function'){\n    return obs(handler.bind(obs))\n  }\n}\n\nfunction invoke(fn){\n  if (typeof fn === 'function'){\n    return fn()\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/wave-hook.js":"var WaveSvg = require('lib/wave-svg')\nvar resolve = require('path').resolve\n\nmodule.exports = WaveHook\n\nvar cache = {}\n\nfunction WaveHook (context, src) {\n  if (!(this instanceof WaveHook)) {\n    return new WaveHook(context, src)\n  }\n  this.context = context\n  this.src = src\n}\n\nWaveHook.prototype.hook = function (node, prop, prev) {\n  if (!prev || prev.src !== this.src) {\n    node.innerHTML = ''\n    var path = resolve(this.context.cwd, this.src)\n    if (!cache[path]) {\n      cache[path] = WaveSvg(path, this.context)\n    }\n\n    waitForLoad(cache[path], function () {\n      node.innerHTML = cache[path]()\n      var svg = node.querySelector('svg')\n      if (svg) {\n        this.release = cache[path].onAppendChild(function (fragment) {\n          svg.insertAdjacentHTML('afterbegin', fragment)\n        })\n      }\n    })\n  }\n}\n\nWaveHook.prototype.unhook = function (node, prop, next) {\n  if (this.release) {\n    this.release()\n    this.release = null\n  }\n  if (next && next._type === 'WaveHook') {\n    return\n  }\n  node.innerHTML = ''\n}\n\nWaveHook.prototype._type = 'WaveHook'\n\nfunction waitForLoad (svg, cb) {\n  if (svg()) {\n    process.nextTick(cb)\n  } else {\n    var release = svg(function (val) {\n      if (val) {\n        setImmediate(release)\n        cb()\n      }\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/wave-svg.js":"var RangeDecoder = require('audio-buffer-range-decoder')\nvar Observ = require('observ')\nvar Event = require('geval')\nvar svg = require('micro-css/h')(require('virtual-dom/virtual-hyperscript/svg'))\nvar toHtml = require('vdom-to-html')\n\nmodule.exports = function (path, options, onDone) {\n  var obs = Observ()\n  var remaining = null\n  var position = 0\n  var chunkDuration = 2\n\n  var scale = 40\n  var height = 100\n\n  var meta = null\n  var paths = []\n  var markerPath = null\n\n  var decodeRange = null\n  var svgPath = path + '.svg'\n\n  var broadcastAppend = null\n  obs.onAppendChild = Event(function (broadcast) {\n    broadcastAppend = broadcast\n  })\n\n  options.fs.readFile(svgPath, 'utf8', function (err, value) {\n    if (err) {\n      decodeRange = RangeDecoder(path, options, function (err, res) {\n        if (err) return onDone && onDone(err)\n        meta = res\n        remaining = meta.duration\n        nextChunk()\n      })\n\n      // cue points\n      var timePath = path + '.time'\n      options.fs.readFile(timePath, function (err, buffer) {\n        if (!err) {\n          var data = new Float32Array(new Uint8Array(buffer).buffer)\n          markerPath = svg('path', {\n            d: getMarkerPath(data, scale, height),\n            fill: 'rgba(255,255,255,0.1)'\n          })\n          refresh()\n        }\n      })\n    } else {\n      obs.set(value)\n      onDone && onDone(null, value)\n    }\n  })\n\n  function nextChunk () {\n    if (remaining > 0) {\n      var duration = Math.min(chunkDuration, remaining)\n      decodeRange(position, duration, function (err, audioBuffer) {\n        if (err) return onDone && onDone(err)\n        var data = audioBuffer.getChannelData(0)\n        var path = getPathForData(data, Math.ceil(duration * scale), height, Math.ceil(position * scale))\n        var element = svg('path', {\n          fill: 'rgb(255,255,255)',\n          d: path\n        })\n        paths.push(element)\n        broadcastAppend(toHtml(element))\n        refresh()\n\n        remaining -= duration\n        position += duration\n\n        nextChunk()\n      })\n    } else {\n      onDone && onDone(null, obs())\n      options.fs.writeFile(svgPath, obs(), function () {\n        // done\n      })\n    }\n  }\n\n  function refresh () {\n    if (meta) {\n      var element = svg('svg', {\n        xmlns: 'http://www.w3.org/2000/svg',\n        height: height,\n        width: Math.ceil(meta.duration * scale)\n      }, [\n        paths,\n        markerPath\n      ])\n      obs.set(toHtml(element))\n    }\n  }\n\n  return obs\n}\n\nfunction getMarkerPath (markers, scale, height) {\n  var result = 'M0,0'\n\n  for (var i = 0; i < markers.length; i++) {\n    var x = Math.round(markers[i] * scale)\n    if (i % 2) {\n      result += line(x, 0) + line(x, height)\n    } else {\n      result += line(x, height) + line(x, 0)\n    }\n  }\n\n  if (i > 0) {\n    var x = Math.round(markers[i-1] * scale)\n    result += line(x, 0)\n  }\n\n  return result + ' Z'\n}\n\nfunction line(x,y) {\n  return ' L' + x + ',' + y\n}\n\nfunction getPathForData(data, width, height, x){\n\n  x = x || 0\n\n  width += 1\n  var step = Math.ceil( data.length / width )\n  var amp = (height / 2)\n\n  var maxValues = []\n  var minValues = []\n\n  for(var i=0;i<width;i++){\n    var min = 1.0\n    var max = -1.0\n    var defined = false\n    for (j=0; j<step; j++) {\n      var datum = data[(i*step)+j]\n      if (datum < min){\n        min = datum\n        defined = true\n      }\n      if (datum > max){\n        max = datum\n        defined = true\n      }\n    }\n\n    if (defined){\n      maxValues[i] = max\n      minValues[i] = min\n    } else {\n      maxValues[i] = 0\n      minValues[i] = 0\n    }\n\n  }\n\n  // top\n  var result = 'M ' + (x-1) + ',' + (height/2)\n  maxValues.forEach(function(val, i){\n    result += ' L' + (i+x) + ',' + Math.round(amp+(val*amp))\n  })\n\n  // end point\n  result += ' L' + (width+x) + ',' + (height/2)\n\n  // bottom\n  minValues.reverse().forEach(function(val,i){\n    result += ' L' + (width+x-i-1) + ',' + Math.round(amp+(val*amp))\n  })\n\n  return result + ' Z'\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/yank-silence.js":"var Observ = require('observ')\n\nmodule.exports = function(audioContext, input) {\n\n  var output = audioContext.createGain()\n  var analyser = audioContext.createAnalyser()\n  analyser.fftSize = 32\n  analyser.smoothingTimeConstant = 0.1\n  output.connect(analyser)\n\n  var yank = audioContext.createGain()\n  input.connect(yank)\n\n  var fft = new Uint8Array(analyser.frequencyBinCount)\n  var waiting = false\n\n  output.active = Observ(false)\n\n  output.trigger = function() {\n    if (!waiting) {\n      yank.connect(output)\n      waiting = true\n      output.active.set(true)\n      setTimeout(function() {\n        var stopWaiting = setInterval(function() {\n          analyser.getByteFrequencyData(fft)\n          var sum = 0\n          for (var i=0;i<fft.length;i++) {\n            sum += fft[i]\n          }\n\n          if (sum === 0) {\n            clearInterval(stopWaiting)\n            yank.disconnect()\n            output.active.set(false)\n            waiting = false\n          }\n\n        }, 1000)\n      }, 5000)\n    }\n  }\n\n  return output\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/zoom-event.js":"module.exports = ZoomEvent\n\nvar delegator = require('dom-delegator')()\ndelegator.listenTo('mousewheel')\n\nfunction ZoomEvent (fn, data){\n  var handler = {\n    handleEvent: handle,\n    fn: fn,\n    data: data\n  }\n  return handler\n}\n\nfunction handle(ev){\n  if (ev.ctrlKey) {\n    var raw = ev._rawEvent\n    ev.preventDefault()\n    raw.stopImmediatePropagation()\n    this.fn(raw.deltaY, this.data)\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/scripts/compress-project.js":"var execFile = require('child_process').execFile\nvar each = require('async-each')\nvar fs = require('fs')\nvar extend = require('xtend/immutable')\nvar mkdirp = require('mkdirp')\nvar join = require('path').join\nvar dirname = require('path').dirname\nvar basename = require('path').basename\nvar extname = require('path').extname\n\n// compress and trim all audio files\n// requires ffmpeg to be in path and built with libvorbis support\n\ncompressProject(\n  '/Users/matt/Projects/Destroy With Science/New Drop', \n  '/Users/matt/Projects/Destroy With Science/Compressed Drop', \n  function(err) {\n    if (err) throw err\n    process.exit()\n  }\n)\n\nfunction compressProject(path, output, cb) {\n  fs.exists(output, function(exists) {\n    if (exists) {\n      return cb&&cb(new Error(\"Output path already exists\"))\n    }\n    mkdirp(output, function(err) {\n      if (err) return cb&&cb(err)\n      fs.readdir(path, function(err, result) {\n        if (err) return cb&&cb(err)\n        forEach(result, function(name, next) {\n          var setupPath = join(path, name, 'index.json')\n          var setupOutput = join(output, name, 'index.json')\n          fs.exists(setupPath, function(exists) {\n            if (exists) {\n              fs.mkdir(join(output, name), function(err) {\n                compressFile(setupPath, setupOutput, next)\n              })\n            } else {\n              next()\n            }\n          })\n        }, cb)\n      })\n    })\n  })\n}\n\nfunction compressFile(path, output, cb) {\n  console.log(output)\n  var dir = dirname(path)\n  var outputDir = dirname(output)\n  fs.readFile(path, 'utf8', function(err, result) {\n    if (err) return cb&&cb(err)\n    var setup = JSON.parse(result)\n    var chunks = []\n    var audioBuffers = []\n    var finalSetup = JSON.stringify(setup, function(key, value) {\n      if (value && value.node === 'external' && value.src && value.id) {\n        chunks.push([\n          join(dir, value.src), \n          join(outputDir, value.id + '.json')\n        ])\n        return extend(value, {\n          src: './' + value.id + '.json'\n        })\n      } else if (value && value.buffer && value.buffer.node === 'AudioBuffer' && value.buffer.src) {\n        var start = value.offset && value.offset[0] || 0\n        var end = value.offset && value.offset[1] || 1\n        var ext = extname(value.buffer.src)\n        var base = basename(value.buffer.src, ext)\n        var newFileName = base + '_' + ms(start) + '-' + ms(end) + '.ogg'\n\n        audioBuffers.push([\n          join(dir, value.buffer.src), \n          join(outputDir, newFileName),\n          start, end\n        ])\n\n        return extend(value, {\n          offset: [0,1],\n          buffer: extend(value.buffer, {\n            src: './' + newFileName\n          })\n        })\n\n      } else {\n        return value\n      }\n    })\n\n    fs.writeFile(output, finalSetup, function(err) {\n      if (err) return cb&&cb(err)\n      forEach(chunks, function(x, next) {\n        compressFile(x[0], x[1], next)\n      }, function(err) {\n        if (err) return cb&&cb(err)\n        forEach(audioBuffers, function(x, next) {\n          compressAudio(x[0], x[1], x[2], x[3], next)\n        }, cb)\n      })\n    })\n  })\n}\n\nfunction compressAudio(path, output, start, end, cb) {\n  console.log(output)\n  fs.exists(output, function(exists) {\n    if (!exists) {\n      getAudioDuration(path, function(err, duration) {\n        var from = (start||0) * duration\n        var to = (end||1) * duration\n        execFile('ffmpeg', [\n          \"-i\", path, \n          \"-codec:a\", \"libvorbis\", \n          \"-qscale:a\", \"5\", \n          \"-ss\", from, \n          \"-to\", to, \n          output\n        ], cb)\n      })\n    } else {\n      cb()\n    }\n  })\n}\n\nfunction ms(s) {\n  return Math.round(s * 1000)\n}\n\nfunction getAudioDuration(path, cb) {\n  execFile(\"ffprobe\", [\n    path, \n    '-show_entries', 'format=duration', \n    '-v', 'quiet' \n  ], function(err, res) {\n    if (err) return cb&&cb(err)\n    var match = /duration=([0-9\\.]+)\\n/.exec(res)\n    cb&&cb(null, parseFloat(match[1]))\n  })\n}\n\nfunction forEach(array, fn, cb){\n  var i = -1\n  function next(err){\n    if (err) return cb&&cb(err)\n    i += 1\n    if (i<array.length){\n      fn(array[i], next, i)\n    } else {\n      cb&&cb(null)\n    }\n  }\n  next()\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/scripts/link-lib.js":"var fs = require('fs')\nvar join = require('path').join\n\nprocess.cwd(join(__dirname, '..'))\nfs.symlink(join('..','lib'), join('node_modules', 'lib'), 'dir', function(err) {\n  if (!err) {\n    console.log('node_modules/lib -> lib')\n  }\n})","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/params/mod-range.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar send = require('value-event/event')\n\nvar Range = require('./range.js')\nvar read = require('lib/read')\nvar QueryParam = require('lib/query-param')\nvar extend = require('xtend')\nvar spawnNode = require('lib/spawn-node')\nvar SubLoop = require('lib/sub-loop')\nvar formatParams = require('lib/format-params')\n\nmodule.exports = function render (param, options) {\n  var value = read(param)\n\n  var context = param.context\n  var currentValue = read(getValueParam(param))\n  var revertValue = resolveValue(currentValue)\n  var trigger = isTriggerable(param)\n\n  var modulatorOptions = [\n    h('option', {\n      rawValue: {\n        node: 'modulator/lfo',\n        trigger: trigger\n      },\n      action: wrap\n    }, 'LFO')\n  ]\n\n  if (trigger) {\n    modulatorOptions.push(\n      h('option', {\n        rawValue: {\n          node: 'modulator/adsr'\n        },\n        action: wrap\n      }, 'Envelope (ADSR)')\n    )\n  }\n\n\n  var linkSelector = h('select.link', {\n    'ev-change': SelectedValueHandler(param)\n  }, [\n    h('option', {\n      rawValue: revertValue,\n      selected: SetImmediateHook(!(currentValue instanceof Object))\n    }, 'Specify Value'),\n    options.allowSpawnModulator ? h('option', {\n      rawValue: options,\n      action: spawnModulatorChunk\n    }, '+ Create Modulator') : null,\n    param.context.chunk ? h('option', {\n      rawValue: options,\n      action: spawnParam\n    }, '+ Create Param') : null,\n    SubLoop([context, context.paramLookup, currentValue, options.format], getParamLinkOptions),\n    modulatorOptions.length ? h('optgroup', {\n      label: 'Add Modulator'\n    }, [\n      modulatorOptions\n    ]) : null\n  ])\n\n  var classList = []\n  if (options.flex) {\n    if (options.flex === 'small' && !(value instanceof Object)){\n      classList.push('-flexSmall')\n    } else {\n      classList.push('-flex')\n    }\n  }\n\n  if (currentValue && currentValue.node === 'linkParam') {\n    return h('ModParam -linked', {\n      className: classList.join(' ')\n    }, [\n      h('div.param', [\n        h('span.title', options.title), ' ⇒ ', currentValue.param\n      ]),\n      linkSelector,\n      h('div.sub', getSubEditors(param, {\n        format: options.format\n      }))\n    ])\n  } else {\n    return h('ModParam -value', {\n      className: classList.join(' ')\n    }, [\n      h('div.param', [\n        Range(param, extend(options, {\n          flex: true\n        }))\n      ]),\n      linkSelector,\n      h('div.sub', getSubEditors(param, {\n        format: options.format\n      }))\n    ])\n  }\n\n}\n\nfunction getParamLinkOptions (context, params, currentValue, format) {\n  var options = []\n\n  var minValue = 0\n  var maxValue = 1\n\n  if (typeof currentValue === 'number') {\n    minValue = 0\n    maxValue = currentValue || 1\n  } else if (currentValue && (currentValue.minValue != null || currentValue.maxValue != null)) {\n    minValue = currentValue.minValue || 0\n    maxValue = currentValue.maxValue\n  }\n\n  if (params) {\n    var currentId = currentValue && currentValue.node === 'linkParam' ? currentValue.param : null\n    var included = false\n    var keys = params.keys()\n    for (var i = 0; i < keys.length; i++) {\n      var p = params.get(keys[i])\n      var id = keys[i]\n      if (!hasFeedback(context, p)) {\n        if (id === currentId) {\n          included = true\n        }\n        options.push(\n          h('option', {\n            rawValue: getParamLink(id, currentValue, format),\n            selected: SetImmediateHook(\n              currentValue &&\n              currentValue.node === 'linkParam' &&\n              currentValue.param === id\n            )\n          }, getModulatorName(id, p))\n        )\n      }\n    }\n\n    if (!included && currentId) {\n      options.unshift(\n        h('option', {\n          rawValue: getParamLink(currentId, currentValue, format),\n          selected: SetImmediateHook(true)\n        }, '[' + currentId + ']')\n      )\n    }\n  }\n\n  return h('optgroup', {\n    label: 'Link Param'\n  }, [\n    options\n  ])\n}\n\nfunction isExpFormat(format) {\n  return (format === 'arfo')\n}\n\nfunction getModulatorName (key, modulator) {\n  if (modulator && modulator._type === 'ModulatorChunk') {\n    return key + ' (modulator)'\n  } else {\n    return key\n  }\n}\n\nfunction SetImmediateHook(value) {\n  if (!(this instanceof SetImmediateHook)) {\n    return new SetImmediateHook(value)\n  }\n  this.value = value\n}\n\nSetImmediateHook.prototype.hook = function (element, prop) {\n  var value = this.value\n  if (value) {\n    setImmediate(function() {\n      element[prop] = value\n    })\n  }\n}\n\nfunction getSubEditors (param, options) {\n  var editors = []\n  var query = []\n\n  var value = read(param)\n\n  while (value instanceof Object) {\n\n    var currentParam = query.length ? QueryParam(param, query.join('.')) : param\n\n    if (value.node === 'linkParam') {\n      editors.unshift(\n        ParamLink(currentParam, options)\n      )\n    } else if (value.node === 'modulator/lfo') {\n      editors.unshift(\n        LFO(currentParam, options)\n      )\n    } else if (value.node === 'modulator/adsr') {\n      editors.unshift(\n        ADSR(currentParam, options)\n      )\n    }\n\n    query.push('value')\n    value = value.value\n  }\n\n  return editors\n}\n\nfunction hasFeedback (context, modulator){\n  if (modulator && modulator.context) {\n    var chunk = modulator.context.chunk\n    return chunk && chunk._type == \"ModulatorChunk\" && chunk === context.chunk\n  }\n}\n\nfunction SelectedValueHandler(param) {\n  return {\n    param: param,\n    handleEvent: handleSelectEvent\n  }\n}\n\nfunction ParamLink (param, options) {\n  return h('div', [\n\n    Range(QueryParam(param, 'minValue'), extend(options, {\n      flex: true,\n      title: 'min'\n    })),\n\n    Range(QueryParam(param, 'maxValue'), extend(options, {\n      flex: true,\n      title: 'max'\n    })),\n\n    options.format !== 'ratio1' ? Toggle(QueryParam(param, 'quantize'), {\n      title: 'Round to whole number',\n      caption: 'R',\n      onValue: 1,\n      offValue: null\n    }) : null\n\n  ])\n}\n\nfunction LFO(param, options){\n\n  var mode = QueryParam(param, 'mode')\n  var sync = QueryParam(param, 'sync')\n\n  var isAdding = mode.read() === 'add'\n  var isSyncing = sync.read()\n\n  var trigger = isTriggerable(param)\n\n  return h('div', [\n\n    h('a', {\n      tabIndex: 0,\n      title: 'Add to value (instead of scaling)',\n      className: isAdding ? '-selected' : '',\n      'ev-click': send(setParam, {\n        param: mode,\n        value: isAdding ? 'multiply' : 'add'\n      })\n    }, '+'),\n\n\n    LinkableRange(QueryParam(param, 'amp'), {\n      flex: true,\n      defaultValue: 1,\n      title: isAdding ? 'add' : 'multiply',\n      format: isAdding ? options.format : 'ratioExp'\n    }),\n\n    Toggle(sync, {\n      title: 'Sync to BPM',\n      caption: 'S'\n    }),\n\n    LinkableRange(QueryParam(param, 'rate'), {\n      flex: true,\n      defaultValue: 1,\n      title: 'rate',\n      format: isSyncing ? 'beat' : 'lfo'\n    }),\n\n    trigger ? Toggle(QueryParam(param, 'trigger'), {\n      title: 'Retrigger',\n      caption: 'T'\n    }) : null,\n\n    LinkableRange(QueryParam(param, 'skew'), {\n      defaultValue: 0,\n      title: 'skew',\n      format: 'offset1',\n      flex: true\n    }),\n\n    LinkableRange(QueryParam(param, 'curve'), {\n      defaultValue: 1,\n      title: 'curve',\n      format: 'ratio1',\n      flex: true\n    }),\n\n    h('button.remove Button -warn', {\n      title: 'Remove',\n      'ev-click': send(remove, param),\n    }, 'X')\n\n  ])\n}\n\nfunction LinkableRange (param, options) {\n  var value = read(param)\n  if (value && value.node === 'linkParam') {\n    return h('RangeParam', [\n      h('div.link', [\n        h('span.title', options.title), ' ⇒ ', value.param\n      ])\n    ])\n  } else {\n    return Range(param, options)\n  }\n}\n\nfunction ADSR (param, options) {\n  return h('div', [\n\n    LinkableRange(QueryParam(param, 'attack'), {\n      flex: true,\n      title: 'a',\n      format: 'ms'\n    }),\n\n    LinkableRange(QueryParam(param, 'decay'), {\n      flex: true,\n      title: 'd',\n      format: 'ms'\n    }),\n\n    LinkableRange(QueryParam(param, 'sustain'), {\n      flex: true,\n      defaultValue: 1,\n      title: 's',\n      format: 'ratio'\n    }),\n\n    LinkableRange(QueryParam(param, 'release'), {\n      flex: true,\n      title: 'r',\n      format: 'ms'\n    }),\n\n    h('button.remove Button -warn', {\n      'ev-click': send(remove, param),\n    }, 'X')\n\n  ])\n}\n\nfunction setParam(ev){\n  ev.param.set(ev.value)\n}\n\nfunction remove(param) {\n  var value = read(param)\n  param.set(value.value)\n}\n\nfunction wrap(param, wrapper) {\n  var value = read(param)\n  param.set(extend(wrapper, {\n    value: value\n  }))\n}\n\nfunction spawnParam (param, options) {\n  var chunk = param.context.chunk\n  var key = chunk.resolveAvailableParam(options.title || 'New Param')\n  var params = chunk.params().slice()\n  params.push(key)\n  chunk.params.set(params)\n\n  var valueParam = getValueParam(param)\n  valueParam.set(getParamLink(key, read(valueParam), options.format))\n}\n\nfunction getParamLink (key, currentValue, format) {\n  var formatter = formatParams[format] || formatParams.default\n  var min = resolveValue(currentValue)\n  var max = formatter.size(min) < 0.5\n    ? formatter.value(1, 0)\n    : formatter.value(0, 0)\n\n  if (format === 'dB') {\n    if (min <= 1) {\n      max = 2\n    } else {\n      max = 0\n    }\n  }\n  return {\n    node: 'linkParam',\n    minValue: min,\n    maxValue: max,\n    param: key,\n    mode: isExpFormat(format) ? 'exp' : 'linear'\n  }\n}\n\nfunction spawnModulatorChunk(param, options) {\n  var setup = param.context.setup\n  var index = setup.chunks.indexOf(options.node) + 1 || undefined\n  spawnNode(setup.chunks, 'modulatorChunk', index, function (err, chunk) {\n    if (options.node) {\n      var newId = setup.chunks.resolveAvailable(options.node().id + '-' + (options.title || 'modulator'))\n      var idParam = chunk.id || QueryParam(chunk, 'id')\n      idParam.set(newId)\n    }\n\n    if (options.format === 'semitone') {\n      chunk.shape.set([1, 8])\n      chunk.slots.set([\n        { node: 'slot/value', id: '0', value: -4 },\n        { node: 'slot/value', id: '1', value: -3 },\n        { node: 'slot/value', id: '2', value: -2 },\n        { node: 'slot/value', id: '3', value: -1 },\n        { node: 'slot/value', id: '4', value: 1 },\n        { node: 'slot/value', id: '5', value: 2 },\n        { node: 'slot/value', id: '6', value: 3 },\n        { node: 'slot/value', id: '7', value: 4 }\n      ])\n    }\n\n    setup.selectedChunkId.set(chunk.id())\n    setup.context.actions.scrollToSelectedChunk()\n\n    getValueParam(param).set({\n      node: 'linkParam',\n      minValue: 0,\n      maxValue: 1,\n      param: chunk.id()\n    })\n  })\n}\n\nfunction getValueParam(param) {\n  var query = []\n\n  var value = read(param)\n\n  while (value != null) {\n    if (value instanceof Object && value.node !== 'linkParam') {\n      query.push('value')\n      value = value.value\n    } else {\n      return query.length ? QueryParam(param, query.join('.')) : param\n    }\n  }\n\n  return param\n}\n\nfunction resolveValue (value) {\n  while (value instanceof Object) {\n    if (value.minValue != null) {\n      value = value.minValue\n    } else {\n      value = value.value\n    }\n  }\n  return value\n}\n\nfunction Toggle(param, options) {\n  var value = read(param)\n  var onValue = options.onValue !== undefined ? options.onValue : true\n  var offValue = options.offValue !== undefined ? options.offValue : false\n\n  return h('a', {\n    tabIndex: 0,\n    title: options.title,\n    className: value === onValue ? '-selected' : '',\n    'ev-click': send(setParam, {\n      param: param,\n      value: value === onValue ? offValue : onValue\n    })\n  }, options.caption)\n}\n\nfunction isTriggerable(param) {\n  if (param.triggerable) {\n    return true\n  } else {\n    var slot = param.context && param.context.slot\n    return !!(\n      slot && slot.triggerOn &&\n      slot().id !== 'output' // HACK: should handle this better\n    )\n  }\n}\n\nfunction handleSelectEvent(ev) {\n  var option = ev.currentTarget.selectedOptions.item(0)\n  if (option) {\n    if (option.action) {\n      option.action(this.param, option.rawValue)\n    } else {\n      getValueParam(this.param).set(option.rawValue)\n    }\n  } else {\n    this.param.set(null)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/params/range.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar send = require('value-event/event')\n\nvar read = require('lib/read')\nvar formatters = require('lib/format-params')\nvar MouseDragEvent = require('lib/mouse-drag-event')\nvar cancelEvent = require('lib/cancel-event')\nvar getValue = require('lib/get-value')\n\nmodule.exports = range\n\nfunction range(param, options){\n  var defaultValue = options.defaultValue || 0\n  var value = getValue(read(param), defaultValue)\n\n  var formatter = formatters[options.format] || formatters.default\n  var widthStyle = widthPercent(formatter.size(value))\n\n  var classes = []\n\n  if (options.large){\n    classes.push('-large')\n  }\n\n  if (options.full){\n    classes.push('-full')\n  }\n\n  if (options.flex){\n    if (options.flex === 'small'){\n      classes.push('-flexSmall')\n    } else {\n      classes.push('-flex')\n    }\n  }\n\n  if (options.pull){\n    classes.push('-pull')\n  }\n\n  var style = options.width ? {'flex-basis': options.width + 'px'} : {}\n  var slider = h('div.slider', {\n    tabIndex: '0',\n    'draggable': true,\n    'ev-dragstart': cancelEvent(),\n    'ev-mousedown': MouseDragEvent(drag, {\n      param: param,\n      formatter: formatter,\n      defaultValue: defaultValue\n    }),\n    'ev-dblclick': send(dblclickHandler, {\n      param: param,\n      defaultValue: defaultValue\n    })\n  },[\n    h('div', {style: widthStyle}),\n    h('span.value', formatter.display(value)),\n    h('span.title', options.title)\n  ])\n  return h('RangeParam', {\n    className: classes.join(' '),\n    style: style\n  }, slider)\n}\n\nfunction dblclickHandler (obj) {\n  if (obj.defaultValue !== undefined) {\n    obj.param.set(obj.defaultValue)\n  } else {\n    obj.param.set(obj.param.defaultValue)\n  }\n}\n\nfunction drag (ev) {\n  var param = this.data.param\n  var formatter = this.data.formatter\n  if (this.data.start){\n    var start = this.data.start\n    var range = this.data.range\n    var offsetX = ev.x - start.x\n    var offsetY = ev.y - start.y\n    var offset = offsetX / (range + Math.abs(offsetY))\n    var value = formatter.value(offset, this.data.startValue)\n    value = getNewValue(read(param), value)\n    if (read(param) !== value) {\n      param.set(value)\n    }\n  } else if (ev.type === 'mousedown') {\n    this.data.range = ev.currentTarget.getBoundingClientRect().width\n    this.data.startValue = getValue(read(param), this.data.defaultValue)\n    this.data.start = ev\n  }\n}\n\nfunction widthPercent(decimal){\n  return {\n    width: (Math.round(Math.min(1, Math.max(decimal, 0))*1000)/10) + '%'\n  }\n}\n\nfunction getNewValue(object, value){\n  if (object instanceof Object && !Array.isArray(object)){\n    var v = obtain(object)\n    v.value = getNewValue(v.value, value)\n    return v\n  } else {\n    return value\n  }\n}\n\nfunction obtain(obj){\n  return JSON.parse(JSON.stringify(obj))\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/params/sample-chooser.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar FileEvent = require('lib/file-event')\nvar QueryParam = require('lib/query-param')\n\nvar importSample = require('lib/import-sample')\n\nmodule.exports = SampleChooser\n\nfunction SampleChooser(node, opts){\n  return h('input SampleChooser', {\n    type: 'file',\n    accept: 'audio/*,video/*',\n    'ev-change': FileEvent(handleChange, node)\n  })\n}\n\nfunction handleChange(file){\n  var node = this.data\n  var context = this.data.context\n\n  importSample(context, file.path, function(err, descriptor){\n    for (var k in descriptor){\n      QueryParam(node, k).set(descriptor[k])\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/params/sample-recorder.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar send = require('value-event/event')\n\nvar importSample = require('lib/import-sample')\nvar WaveRecorder = require('wave-recorder')\nvar extend = require('xtend')\nvar recordingLookup = new WeakMap()\n\nmodule.exports = SampleChooser\n\nfunction SampleChooser (node, opts) {\n  var state = recordingLookup.get(node)\n  var classes = ['ToggleButton', '-record']\n  var title = 'Record'\n  if (state) {\n    classes.push('-active')\n    title = 'Stop Recording'\n  }\n  return h('button', {\n    className: classes.join(' '),\n    title: title,\n    'ev-click': state ? send(stopRecording, node) : send(startRecording, node)\n  }, title)\n}\n\nfunction startRecording (node) {\n  var src = './' + Date.now() + '.wav'\n  var filePath = node.context.fileObject.resolvePath(src)\n  var state = {\n    node: node,\n    recorder: null,\n    path: filePath,\n    src: src\n  }\n\n  recordingLookup.set(node, state)\n\n  // hack to update the state - should really be a widget, or be part of project\n  node.buffer.set(extend(node.buffer(), {recording: true}))\n\n  navigator.webkitGetUserMedia({ audio: true }, function (mediaStream) {\n    var input = node.context.audio.createMediaStreamSource(mediaStream)\n    var recorder = WaveRecorder(node.context.audio, { channels: 2, bitDepth: 32 })\n    var output = node.context.fs.createWriteStream(filePath)\n    recorder.pipe(output)\n    input.connect(recorder.input)\n    state.recorder = recorder\n    output.on('finish', function () {\n      mediaStream.getAudioTracks()[0].stop()\n      importSample(node.context, filePath, function (err, result) {\n        if (!err) {\n          node.buffer.set(result.buffer)\n          node.offset.set(result.offset)\n        }\n      })\n    })\n  }, function (err) {\n    throw err\n  })\n}\n\nfunction stopRecording (node) {\n  var state = recordingLookup.get(node)\n  if (state && state.recorder) {\n    recordingLookup.delete(node)\n    state.recorder.end()\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/params/sample-trimmer.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar svg = require('micro-css/h')(require('virtual-dom/virtual-hyperscript/svg'))\n\nvar QueryParam = require('lib/query-param')\n\nvar IndexParam = require('lib/index-param')\nvar DragEvent = require('lib/drag-event')\nvar ValueEvent = require('lib/value-event')\n\nvar read = require('lib/read')\nvar getValue = require('lib/get-value')\nvar importSample = require('lib/import-sample')\nvar cancelEvent = require('lib/cancel-event')\n\nvar WaveHook = require('./wave-hook.js')\n\nmodule.exports = function(node){\n  var data = read(node) || {}\n  var offset = node.offset || QueryParam(node, 'offset')\n\n  var startOffset = data.offset && data.offset[0] || 0\n  var endOffset = (data.offset && data.offset[1] != null) ? data.offset[1] : 1\n\n  var gainValue = getValue(data.gain, 1)\n\n  var range = endOffset - startOffset\n\n  return h('SampleTrimmer', {\n    draggable: true,\n    'ev-dragstart': DragEvent(dragStart, node),\n    'ev-dragover': DragEvent(dragOver, node),\n    'ev-dragleave': DragEvent(dragLeave, node),\n    'ev-drop': DragEvent(drop, node)\n  },[\n\n    svg('svg WaveView', {\n      'viewBox': '0 0 500 400',\n      'preserveAspectRatio': 'none'\n    }, [\n\n      svg('path.wave', {\n        style: {\n          fill: '#AAA'\n        },\n        'ev-hook': WaveHook(node, 500, 400)\n      }),\n\n\n      svg('rect.section', {\n        x: startOffset * 500, y: 0,\n        width: range * 500,\n        height: 400,\n        style: {\n          fill: 'rgba(142, 255, 126, 0.38)'\n        }\n      }),\n\n      node.slices ? slicesSvg(node.slices() || [], 500, 400) : null,\n\n      svg('path.baseline', {\n        d: 'M0,200 L500,200',\n        style: {\n          strokeWidth:2,\n          stroke: '#AAA'\n        }\n      })\n\n    ]),\n\n    h('input.start', {\n      draggable: true,\n      'ev-dragstart': cancelEvent(),\n      type: 'range',\n      value: new ValueHook(startOffset),\n      min: 0, max: 1,\n      step: 0.00125,\n      'ev-input': ValueEvent(handleChange, 'value', IndexParam(offset, 0, parseNumber))\n    }),\n\n    h('input.end', {\n      draggable: true,\n      'ev-dragstart': cancelEvent(),\n      type: 'range',\n      value: new ValueHook(endOffset),\n      min: 0, max: 1,\n      step: 0.00125,\n      'ev-input': ValueEvent(handleChange, 'value', IndexParam(offset, 1, parseNumber))\n    })\n\n  ])\n}\n\nfunction slicesSvg (slices, width, height) {\n  return slices.map(function (slice) {\n    var x = slice[0] * width\n    return svg('line', {\n      stroke: 'rgba(0,0,0,0.4)',\n      'stroke-width': '3px',\n      x1: x, x2: x, y1: 0, y2: height\n    })\n  })\n}\n\nfunction parseNumber (val) {\n  return parseFloat(val) || 0\n}\n\nfunction dragStart (ev) {\n  var data = read(ev.data) || {}\n  if (data.buffer && data.buffer.src) {\n    ev.dataTransfer.setData('loop-drop/sample-path', ev.data.context.fileObject.resolvePath(data.buffer.src))\n    ev.dataTransfer.dropEffect = 'link'\n  } else {\n    ev.preventDefault()\n  }\n}\n\nfunction dragOver (ev) {\n  var item = ev.dataTransfer.items[0]\n  if (item && item.kind === 'file' && item.type.match(/^(audio|video)\\//)) {\n    ev.currentTarget.classList.add('-dragOver')\n    ev.dataTransfer.dropEffect = 'copy'\n    ev.preventDefault()\n  } else if (ev.dataTransfer.types.includes('loop-drop/sample-path')) {\n    ev.currentTarget.classList.add('-dragOver')\n    ev.dataTransfer.dropEffect = 'link'\n    ev.preventDefault()\n  }\n}\n\nfunction dragLeave (ev) {\n  ev.currentTarget.classList.remove('-dragOver')\n}\n\nfunction drop(ev){\n  var node = ev.data\n  var data = read(node)\n  var context = ev.data.context\n  var item = ev.dataTransfer.items[0]\n\n  ev.preventDefault()\n  dragLeave(ev)\n\n  var currentPath = data.buffer && data.buffer.src && node.context.fileObject.resolvePath(data.buffer.src) || null\n\n  var path = item.kind === 'file'\n    ? ev.dataTransfer.items[0].getAsFile().path\n    : ev.dataTransfer.getData('loop-drop/sample-path')\n\n  if (path && path !== currentPath) {\n    importSample(context, path, function (err, descriptor) {\n      if (err) throw err\n      for (var k in descriptor) {\n        QueryParam(node, k).set(descriptor[k])\n      }\n    })\n  }\n\n}\n\nfunction getGainTransform(value){\n  var offsetHeight = (((currentHeightScale*height) - height) / 2) / currentHeightScale\n  return 'scale(' + currentWidthScale + ' ' + currentHeightScale + ') translate(0 ' + -offsetHeight + ')'\n}\n\nfunction handleChange(value){\n  this.data.set(value)\n}\n\nfunction noop(){}\n\nfunction ValueHook(value){\n  this.value = value\n}\n\nValueHook.prototype.hook = function(node, prop, prev){\n  if (!prev || prev.value !== this.value){\n    if (prev){\n      node[prop] = this.value\n    } else {\n      node.setAttribute(prop, this.value)\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/index-param.js":"var read = require('lib/read')\n\nmodule.exports = IndexParam\n\nfunction IndexParam(target, index, formatter){\n  if (!(this instanceof IndexParam)) return new IndexParam(target, index, formatter)\n  this.target = target\n  this.index = index\n  this.formatter = formatter\n  this.context = target.context\n}\n\nIndexParam.prototype.set = function(value){\n  var current = read(this.target)\n  var val = Array.isArray(current) ? current : []\n  var res = val.slice()\n  if (typeof this.formatter === 'function') {\n    value = this.formatter(value)\n  }\n  res[this.index] = value\n  this.target.set(res)\n}\n\nIndexParam.prototype.read = function(){\n  var current = read(this.target)\n  var val = Array.isArray(current) ? current : []\n  return val[this.index]\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/params/wave-hook.js":"var watch = require('observ/watch')\nvar nextTick = require('next-tick')\nvar getValue = require('lib/get-value')\nvar read = require('lib/read')\n\nvar worker = new Worker('file://' + __dirname + '/../worker/wave-path.js')\nvar callbacks = {}\nvar nextId = 0\n\nworker.onmessage = function (e) {\n  if (callbacks[e.data.id]) {\n    callbacks[e.data.id](e.data.result)\n    delete callbacks[e.data.id]\n  }\n}\n\nvar caches = {}\n\nmodule.exports = WaveHook\n\nfunction WaveHook (node, width, height) {\n  if (!(this instanceof WaveHook)) return new WaveHook(node, width, height)\n  this.node = node\n  this.width = width\n  this.height = height\n}\n\nWaveHook.prototype.hook = function (node, prop, current) {\n  var self = this\n\n  if (current && self.node !== current.node) {\n    self.unhook(node, prop)\n    current = null\n  }\n\n  if (!current && self.node.resolvedBuffer) {\n    nextTick(function () {\n      self.removeListener = watch(self.node.resolvedBuffer, self.update.bind(self, node))\n    })\n  }\n}\n\nWaveHook.prototype.unhook = function (node, prop, next) {\n  if (next) {\n    next.removeListener = this.removeListener\n    next.currentPath = this.currentPath\n  } else if (this.removeListener) {\n    this.removeListener()\n    this.removeListener = null\n    node.setAttribute('d', 'M0,250 L400,250')\n    node.removeAttribute('transform')\n  }\n}\n\nWaveHook.prototype.update = function (node, buffer) {\n  var self = this\n  var descriptor = read(this.node) || {}\n  var gain = getValue(descriptor.amp, 1)\n\n  if (buffer) {\n    var data = buffer ? buffer.getChannelData(0) : []\n    var step = data.length / this.width\n    var quant = Math.ceil(step)\n    var currentWidthScale = quant / step\n\n    var offsetHeight = (((gain * this.height) - this.height) / 2) / gain\n    node.setAttribute('transform', 'scale(' + currentWidthScale + ' ' + gain + ') translate(0 ' + -offsetHeight + ')')\n\n    var cache = getCache(this.width, this.height)\n    var path = cache.get(buffer)\n\n    if (!path) {\n      getPathForData(data, this.width, this.height, function (path) {\n        self.currentPath = path\n        cache.set(buffer, path)\n        node.setAttribute('d', path)\n      })\n    } else {\n      node.setAttribute('d', path)\n      this.currentPath = path\n    }\n  }\n}\n\nfunction getCache (width, height) {\n  var key = this.width + '/' + this.height\n  if (!caches[key]) {\n    caches[key] = new WeakMap()\n  }\n  return caches[key]\n}\n\nfunction getPathForData (data, width, height, cb) {\n  var id = nextId++\n  callbacks[id] = cb\n  worker.postMessage({\n    data: data,\n    id: id,\n    width: width,\n    height: height\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/params/scale-chooser.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar read = require('lib/read')\nvar MouseDragEvent = require('lib/mouse-drag-event')\n\nmodule.exports = ScaleChooser\n\nfunction ScaleChooser(param){\n  var value = getValue(read(param))\n  \n  var buttons = []\n  for (var i=0;i<12;i++){\n    var button = h('div.button', {\n      tabIndex: '0', \n      className: ~value.indexOf(i) ? '-selected' : '',\n      'ev-mousedown': MouseDragEvent(handleDrag, { param: param, id: i })\n    })\n    buttons.push(button)\n  }\n  return h('ScaleChooser', buttons)\n}\n\nfunction handleClick(target){\n  var value = getValue(read(target.param))\n  var index = value.indexOf(target.id)\n  value = value.slice()\n\n  if (~index){\n    value.splice(index, 1)\n  } else {\n    value.push(target.id)\n    value.sort(compare)\n  }\n\n  target.param.set(value)\n}\n\nfunction handleDrag(ev) {\n  var param = this.data.param\n  if (ev.type === 'mousemove' && this.data.start) {\n    var start = this.data.start\n    var offset = Math.round(ev.offsetX / ev.target.clientWidth)\n    if (offset !== this.data.lastOffset) {\n      this.data.lastOffset = offset\n      this.data.dragged = true\n      param.set(this.data.start.map(function(x) {\n        return mod(x + offset, 12)\n      }).sort(compare))\n    }\n  } else if (ev.type === 'mousedown') {\n    this.data.start = read(param)\n    this.data.lastOffset = 0\n  } else if (ev.type === 'mouseup' && !this.data.dragged) {\n    handleClick(this.data)\n  }\n}\n\nfunction mod(n, m) {\n  return ((n%m)+m)%m\n}\n\nfunction compare(a,b){\n  return a - b\n}\n\nfunction getValue(source){\n  return Array.isArray(source) ? source : [0,1,2,3,4,5,6,7,8,9,10,11]\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/params/select.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar read = require('lib/read')\nvar Select = require('lib/widgets/select')\nvar extend = require('xtend')\n\nmodule.exports = SelectParam\n\nfunction SelectParam (param, opts) {\n  return Select(set, param, extend(opts, {\n    selectedValue: read(param)\n  }))\n}\n\nfunction set (value) {\n  this.data.set(value)\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/widgets/select.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar ValueEvent = require('lib/value-event')\nvar read = require('lib/read')\n\nmodule.exports = select\n\nfunction select(fn, data, opts){\n  var value = opts.selectedValue\n\n  var options = typeof opts.options == 'function' ? opts.options() : opts.options\n  options = Array.isArray(options) ? options : []\n  var optionElements = options.map(optionElement)\n\n  if (value){\n    if (!markSelectedOption(optionElements, value)){\n      var display = String(value)\n      if (opts.missingPrefix){\n        display += opts.missingPrefix\n      }\n      optionElements.unshift(h('option', {rawValue: value, selected: true}, display))\n    }\n  }\n\n  if (opts.includeBlank){\n    var display = opts.includeBlank === true ? 'None' : opts.includeBlank\n    optionElements.unshift(h('option', {rawValue: null}, display))\n  }\n\n  return h('select', {\n    'className': opts.flex ? '-flex' : '',\n    'name': 'value', 'ev-change': SelectedValueHandler(fn, data, opts)\n  }, optionElements)\n}\n\nfunction optionElement(option){\n  if (Array.isArray(option)){\n    if (Array.isArray(option[1])){\n      return h('optgroup', {\n        label: option[0]\n      }, option[1].map(optionElement))\n    }\n    return h('option', {rawValue: option[1]}, option[0])\n  } else {\n    return h('option', {rawValue: option}, option)\n  }\n}\n\nfunction markSelectedOption(options, selectedValue){\n  for (var i=0;i<options.length;i++){\n    var option = options[i]\n    if (option.properties && option.properties.rawValue == selectedValue){\n      option.properties.selected = true\n      return true\n    }\n    if (option.children && option.children.length){\n      var res = markSelectedOption(option.children, selectedValue)\n      if (res){\n        return true\n      }\n    }\n  }\n}\n\nfunction SelectedValueHandler(fn, data, opts) {\n  return {\n    fn: fn,\n    data: data,\n    opts: opts,\n    handleEvent: handleSelectEvent\n  }\n}\n\nfunction handleSelectEvent(ev) {\n  var option = ev.currentTarget.selectedOptions.item(0)\n  if (option) {\n    this.fn(option.rawValue)\n  } else {\n    this.fn(null)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/params/text.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar ValueEvent = require('lib/value-event')\nvar read = require('lib/read')\n\nmodule.exports = TextParam\n\nfunction TextParam(param, options) {\n  options = options || {}\n\n  return h('input', {\n    'type': 'text',\n    'size': options.size,\n    'placeholder': options.placeholder,\n    'value': read(param), \n    'ev-change': ValueEvent(handleValue, 'value', param)\n  })\n}\n\nfunction handleValue(value) {\n  this.data.set(value)\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/params/toggle-button.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar send = require('value-event/event')\nvar read = require('lib/read')\nvar AttributeHook = require('lib/attribute-hook')\n\nmodule.exports = function(param, options){\n  var value = read(param)\n\n  if (value == null){\n    value = options.defaultValue || false\n  }\n\n  var onValue = 'onValue' in options ? options.onValue : true\n  var offValue = 'offValue' in options ? options.offValue : false\n\n  var isOn = value == onValue\n  var classes = []\n\n  if (!options.custom) {\n    classes.push('ToggleButton')\n  }\n\n  if (isOn) {\n    classes.push('-active')\n  }\n\n  if (options.classList) {\n    classes = classes.concat(options.classList)\n  }\n\n  return h('button', {\n    className: classes.join(' '),\n    title: options.description,\n    'ev-click': send(setValue, {\n      param: param,\n      value: isOn ? offValue : onValue\n    })\n  }, isOn ? options.title : (options.offTitle || options.title) )\n}\n\nfunction setValue(ev){\n  ev.param.set(ev.value)\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/periodic-waves/convert.js":"var fs = require('fs')\n\nwriteArray('name.real', input.real)\nwriteArray('name.imag', input.imag)\n\nfunction writeArray (file, array) {\n  fs.writeFileSync(\n    file, new Buffer(new Uint8Array(new Float32Array(array).buffer))\n  )\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/periodic-waves/raw.js":"var fs = require('fs')\nvar path = require('path')\nvar raw = {}\n\nfs.readdirSync(__dirname).forEach(function(file) {\n  var ext = path.extname(file)\n  if (ext === '.imag' || ext === '.real') {\n    var base = path.basename(file, ext)\n    var item = raw[base] = raw[base] || {}\n    item[ext.slice(1)] = fs.readFileSync(path.join(__dirname, file))\n  }\n})\n\nmodule.exports = raw\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/widgets/audio-meter.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar send = require('value-event/event')\nvar createElement = require('virtual-dom/vdom/create-element')\nvar watch = require('observ/watch')\n\nmodule.exports = AudioMeter\n\nfunction AudioMeter(value, opts){\n  if (!(this instanceof AudioMeter)) return new AudioMeter(value, opts)\n  this.value = value\n  this.opts = opts\n}\n\nAudioMeter.prototype.type = 'Widget'\n\nAudioMeter.prototype.init = function(){\n  var element = createElement(render(this.opts))\n\n  var state = this.state = {\n    value: this.value,\n    opts: this.opts,\n    lastL: 0,\n    lastR: 0,\n    update: function(){\n      var current = state.value() || [state.opts.min, state.opts.min]\n      var l = abs(current[0], state.opts)\n      var r = abs(current[1], state.opts)\n      updateActive(element.childNodes[0].childNodes, l, state.lastL)\n      updateActive(element.childNodes[1].childNodes, r, state.lastR)\n      state.lastL = l\n      state.lastR  = r\n    }\n  }\n  bind(this.state)\n  return element\n}\n\nfunction updateActive(nodes, current, last){\n  if (current > last){\n    for (var i=last;i<=current;i++){\n      nodes[i].classList.add('-active')\n    }\n  } else {\n    for (var i=current;i<=last;i++){\n      nodes[i].classList.remove('-active')\n    }\n  }\n}\n\nAudioMeter.prototype.update = function(prev, elem){\n  this.state = prev.state\n  this.state.value = this.value\n  this.state.opts = this.opts\n  if (this.value !== prev.value){\n    bind(this.state)\n  }\n}\n\nAudioMeter.prototype.destroy = function(){\n  unbind(this.state)\n}\n\nfunction bind(state){\n  unbind(state)\n  if (state.value){\n    state.removeListener = watch(state.value, state.update)\n  }\n}\n\nfunction unbind(state){\n  if (state.removeListener){\n    state.removeListener()\n    state.removeListener = null\n  }\n}\n\nfunction render(opts){\n  return h('AudioMeter', [\n    h('div.left', getElements(opts)),\n    h('div.right', getElements(opts))\n  ])\n}\n\nfunction abs(value, options){\n  return Math.min(Math.max(Math.floor((value - options.min) * options.steps / (options.max - options.min)), 0), options.steps-1)\n}\n\nfunction getElements(options){\n  var result = []\n  var range = options.max - options.min\n  var step = range / options.steps\n  for (var i=options.min;i<options.max;i+=step){\n    if (i>=options.red){\n      result.push(h('div -red'))\n    } else if (i>=options.amber){\n      result.push(h('div -amber'))\n    } else {\n      result.push(h('div'))\n    }\n  }\n  return result\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/widgets/chunk.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar send = require('value-event/event')\nvar renderRouting = require('./routing.js')\n\nvar Range = require('lib/params/range')\nvar ModRange = require('lib/params/mod-range')\n\nvar ToggleButton = require('lib/params/toggle-button')\nvar RenameHook = require('lib/rename-hook')\nvar ObservStyleHook = require('lib/observ-style-hook')\nvar ObservClassHook = require('lib/observ-class-hook')\n\nvar QueryParam = require('lib/query-param')\nvar FlagParam = require('lib/flag-param')\nvar IndexParam = require('lib/index-param')\nvar read = require('lib/read')\n\nmodule.exports = function(node, opts){\n  var data = node()\n  var innerData = node.resolved && node.resolved() || data\n\n  var selectedObs = node.selected || node.node && node.node.selected\n  var setup = node.context.setup\n  var actions = node.context.actions\n\n  if (data) {\n    var minimised = node.minimised || QueryParam(node, 'minimised')\n    var volume = node.volume || QueryParam(node, 'volume')\n\n    return h('div ExternalNode', {\n      className: data.minimised ? '-minimised' : '',\n      'ev-class': ObservClassHook(selectedObs, '-selected'),\n      'ev-click': send(setup.selectedChunkId.set, data.id),\n      'style': ObservStyleHook(selectedObs, 'border', function (value) {\n        return '2px solid ' + color(innerData.color, value ? 1 : 0)\n      })\n    }, [\n      h('header', {\n        style: ObservStyleHook(selectedObs, 'backgroundColor', function (value) {\n          return color(innerData.color, value ? 0.5 : 0.1)\n        })\n      }, [\n        h('button.twirl', {\n          'ev-click': send(toggleParam, minimised)\n        }),\n        h('span', {'ev-rename': RenameHook(node, {\n          enabled: selectedObs,\n          onChange: actions.updateChunkReferences\n        })}),\n        opts.extraHeader,\n        opts.volume ? Range(volume, {format: 'dB', title: 'vol', defaultValue: 1, width: 150, pull: true}) : null,\n        opts.external ? h('button.edit Button -edit', {\n          'ev-click': send(editChunk, node)\n        }, 'edit') : null,\n        h('button.remove Button -warn', {\n          'ev-click': send(remove, node),\n        }, 'X')\n      ]),\n      data.minimised ? '' : opts.main\n    ])\n  }\n  return h('UnknownNode')\n}\n\nfunction remove (chunk) {\n  var project = chunk.context.project\n  var collection = chunk.context.collection\n  var fileObject = chunk.context.fileObject\n  var setup = chunk.context.setup\n  var descriptor = chunk()\n\n  collection.remove(chunk)\n  setup.updateChunkReferences(descriptor.id, null)\n\n  // delete file if id matches file name and file is in cwd\n  if (descriptor.id && chunk.getPath) {\n    var path = chunk.getPath()\n    var truePath = fileObject.resolvePath(descriptor.id + '.json')\n    if (path === truePath) {\n      project.actions.deleteEntry(path)\n    }\n  }\n}\n\nfunction editChunk(chunk){\n  var context = chunk.context\n  var fileObject = chunk.context.fileObject\n\n  var descriptor = chunk()\n  if (descriptor && descriptor.src){\n    var path = fileObject.resolvePath(descriptor.src)\n    context.actions.open(path)\n  }\n}\n\nfunction toggleParam(param){\n  param.set(!read(param))\n}\n\nfunction color(rgb, a){\n  if (!Array.isArray(rgb)){\n    rgb = [100,100,100]\n  }\n  return 'rgba(' + rgb[0] +','+rgb[1]+','+rgb[2]+','+a+')'\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/widgets/routing.js":"var h = require('lib/h')\nvar SelectWidget = require('lib/widgets/select')\nvar QueryParam = require('lib/query-param')\nvar spawnNode = require('lib/spawn-node')\nvar SubLoop = require('lib/sub-loop')\nvar setRoute = require('lib/set-route')\nvar read = require('lib/read')\n\nvar defaultOutputs = [\n  ['Default', '$default'],\n  ['+ Create New Meddler', spawnMeddler]\n]\n\nmodule.exports = function (node) {\n  var setup = node.context.setup\n  return SubLoop([node, setup.resolved.chunks, node.resolved], renderRouting)\n}\n\nfunction renderRouting (node, resolvedChunks) {\n  var data = node.resolved && node.resolved() || node()\n  if (data) {\n    var outputOptions = defaultOutputs.concat(resolvedChunks().filter(rejectMatchingId, data).reduce(placeChunkInputs, []))\n    return h('div -block', [\n      h('div.extTitle', 'output'),\n      h('div', SelectWidget(handleSelect, { node: node, id: 'output' }, {\n        options: outputOptions,\n        selectedValue: data.routes && data.routes['output'] || '$default'\n      }))\n    ])\n  }\n}\n\nfunction handleSelect (value) {\n  if (typeof value === 'function') {\n    value(this.data)\n  } else {\n    var node = this.data.node\n    setRoute(node, this.data.id, value)\n  }\n}\n\nfunction spawnMeddler (data) {\n  var setup = data.node.context.setup\n  var index = setup.chunks.indexOf(data.node) + 1 || undefined\n  spawnNode(setup.chunks, 'chunk/meddler', index, function (err, chunk) {\n    var newId = setup.chunks.resolveAvailable(data.node().id + '-' + (data.id || 'meddler'))\n    var idParam = chunk.id || QueryParam(chunk, 'id')\n    idParam.set(newId)\n    setup.selectedChunkId.set(newId)\n    setRoute(data.node, data.id, newId + '#input')\n  })\n}\n\nfunction spawnMeddler (data) {\n  var setup = data.node.context.setup\n  var actions = data.node.context.actions\n  var index = setup.chunks.indexOf(data.node) + 1 || undefined\n  spawnNode(setup.chunks, 'chunk/meddler', index, function (err, chunk) {\n    var newId = setup.chunks.resolveAvailable(data.node().id + '-' + (data.id || 'meddler'))\n    var idParam = chunk.id || QueryParam(chunk, 'id')\n    var originalId = read(idParam)\n    idParam.set(newId)\n    actions.updateChunkReferences(originalId, newId, chunk)\n    setup.selectedChunkId.set(newId)\n    setRoute(data.node, data.id, newId + '#input')\n  })\n}\n\nfunction rejectMatchingId(item){\n  return item && this.id !== item.id\n}\n\nfunction placeChunkInputs(result, chunk){\n  if (chunk && chunk.inputs && chunk.inputs.length){\n    result.push([chunk.id, chunk.inputs.map(titleWithResolvedId, chunk)])\n  }\n  return result\n}\n\nfunction titleWithResolvedId(id){\n  return [this.id + ' > ' + id, this.id + '#' + id]\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/widgets/collection.js":"var Orderable = require('./orderable.js')\nvar renderNode = require('lib/render-node')\n\nmodule.exports = renderCollection\n\nfunction renderCollection(collection){\n  if (collection){\n    return collection.map(function(node, i){\n      return Orderable(node, renderNode(node))\n    })\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/widgets/orderable.js":"var h = require('lib/h')\nvar MPE = require('lib/mouse-position-event')\n\nmodule.exports = Orderable\n\nfunction Orderable(node, children){\n  return h('Orderable', {\n    draggable: true,\n    'ev-dragstart': MPE(dragStart, node),\n    'ev-dragend': MPE(dragEnd, node),\n    'ev-dragover': MPE(dragOver, node)\n  }, children)\n}\n\nfunction dragOver (ev) {\n  var currentTarget = window.currentDrag\n  if (currentTarget && currentTarget.data){\n    var fromCollection = currentTarget.data.context.collection\n    var toCollection = ev.data.context.collection\n\n    if (fromCollection === toCollection && ev.data !== currentTarget.data){\n      var index = toCollection.indexOf(ev.data)\n      if (~index){\n        toCollection.move(currentTarget.data, index)\n      }\n    }\n  }\n}\n\nfunction dragStart (ev) {\n  var node = (ev.data.resolved || ev.data)()\n  ev.dataTransfer.setData('loop-drop/' + node.node.split('/')[0], JSON.stringify(node))\n  window.currentDrag = ev\n}\n\nfunction dragEnd (ev) {\n  if (ev.dataTransfer.dropEffect === 'move') {\n    ev.data.context.collection.remove(ev.data)\n  }\n  window.currentDrag = null\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/widgets/header.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar send = require('value-event/event')\n\nmodule.exports = function(node, display, options){\n  var collection = node.context.collection\n\n  return h('header', options, [\n    display,\n    h('button.remove Button -warn', {\n      'ev-click': send(collection.remove, node),\n    }, 'X')\n  ])\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/widgets/param-editor.js":"var h = require('lib/h')\nvar send = require('value-event/event')\n\nvar EditableHook = require('lib/editable-hook')\nvar IndexParam = require('lib/index-param')\nvar updateParamReferences = require('lib/update-param-references')\n\nmodule.exports = ParamEditor\n\nvar renameLastParam = false\n\nfunction ParamEditor(chunk){\n  var keys = chunk.params()\n  var params = keys.map(function(key, i){\n    var selected = renameLastParam && i === keys.length-1\n    return h('ExternalNode', [\n      h('header', [\n        h('span.name', {\n          'ev-hook': EditableHook(IndexParam(chunk.params, i), selected, onRename)\n        }),\n        h('button.remove Button -warn', {\n          'ev-click': send(removeParam, {chunk: chunk, key: key}),\n        }, 'X')\n      ])\n    ])\n  })\n\n  return [\n    params,\n\n    h('NodeSpawner', h('button Button -main -spawn', {\n      'ev-click': send(spawnParam, chunk)\n    }, '+ param'))\n  ]\n}\n\nfunction onRename (lastValue, value, param) {\n  updateParamReferences(param.context.chunk, lastValue, value)\n}\n\nfunction spawnParam(chunk) {\n  var key = chunk.resolveAvailableParam('New Param')\n  var params = chunk.params().slice()\n  params.push(key)\n  chunk.params.set(params)\n\n  // wow such hacks!\n  renameLastParam = true\n  setTimeout(function() {\n    renameLastParam = false\n  }, 16)\n}\n\nfunction removeParam(target) {\n  var params = target.chunk.params().slice()\n  var index = params.indexOf(target.key)\n  if (~index) {\n    params.splice(index, 1)\n  }\n  target.chunk.params.set(params)\n  updateParamReferences(target.chunk, target.key, null)\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/widgets/params.js":"var h = require('lib/h')\nvar QueryParam = require('lib/query-param')\nvar ModRange = require('lib/params/mod-range')\n\nmodule.exports = renderParams\n\nfunction renderParams(node) {\n  var paramValues = QueryParam(node, 'paramValues', {})\n  var params = QueryParam(node, 'params').read()\n  if (params instanceof Array) {\n    return params.map(function(key) {\n      return h('ParamList', [\n        ModRange(QueryParam(paramValues, key), {\n          title: key,\n          format: 'ratio1',\n          flex: true,\n          allowSpawnModulator: true,\n          node: node\n        })\n      ])\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/widgets/spawner.js":"var h = require('lib/h')\nvar send = require('value-event/event')\nvar extend = require('xtend')\nvar spawnNode = require('lib/spawn-node')\n\nmodule.exports = Spawner\n\nfunction Spawner(collection, options){\n  var buttons = []\n\n  for (var i=0;i<options.nodes.length;i++) {\n    var descriptor = options.nodes[i]\n    if (descriptor && descriptor.spawn !== false) {\n      buttons.push(h('button Button -main -spawn', {\n        'title': descriptor.description || '',\n        'ev-click': send(spawn, {\n          descriptor: descriptor,\n          collection: collection,\n          onSpawn: options.onSpawn\n        })\n      }, '+ ' + descriptor.name))\n    }\n  }\n\n  return h('NodeSpawner', buttons)\n}\n\nfunction spawn (opts) {\n  spawnNode(opts.collection, opts.descriptor.node, function (err, node) {\n    opts.onSpawn && opts.onSpawn(node)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/worker/peaks.js":"self.onmessage = function (e) {\n  var result = []\n  var highestValue = 0\n  var highestValuePos = 0\n  var lastCross = 0\n  var id = e.data.id\n  var data = e.data.data\n  var windowSize = e.data.windowSize\n  var start = Math.max(0, e.data.start)\n  var step = e.data.step || e.data.windowSize\n  var end = Math.min(e.data.end, data.length)\n\n  for (var i = start; i < end; i += step) {\n    for (var pos = i; pos < windowSize + i; pos++) {\n      var value = data[pos]\n\n      if (value === 0 || (pos - lastCross > 128 && value < 0.01)) {\n        lastCross = pos\n      }\n\n      if (value > highestValue) {\n        highestValue = value\n        highestValuePos = pos\n      }\n    }\n    result.push([highestValuePos, highestValue])\n    highestValue = 0\n  }\n\n  self.postMessage({\n    id: id,\n    result: result\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/worker/wave-path.js":"self.onmessage = function (e) {\n  var data = e.data.data\n  var width = e.data.width\n  var height = e.data.height\n\n  var step = Math.ceil(data.length / width)\n  var amp = (height / 2)\n\n  var maxValues = []\n  var minValues = []\n\n  for (var i = 0; i < width; i++) {\n    var min = 1.0\n    var max = -1.0\n    var defined = false\n    for (var j = 0; j < step; j++) {\n      var datum = data[(i * step) + j]\n      if (datum < min) {\n        min = datum\n        defined = true\n      }\n      if (datum > max) {\n        max = datum\n        defined = true\n      }\n    }\n\n    if (defined) {\n      maxValues[i] = max\n      minValues[i] = min\n    } else {\n      maxValues[i] = 0\n      minValues[i] = 0\n    }\n  }\n\n  // top\n  var result = 'M0,' + (height / 2)\n  maxValues.forEach(function (val, i) {\n    result += ' L' + i + ',' + Math.round(amp + (val * amp))\n  })\n\n  // end point\n  result += ' L' + width + ',' + (height / 2)\n\n  // bottom\n  minValues.reverse().forEach(function (val, i) {\n    result += ' L' + (width - i - 1) + ',' + Math.round(amp + (val * amp))\n  })\n\n  self.postMessage({\n    id: e.data.id,\n    result: result + ' Z'\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/bitcrusher/view.js":"var h = require('lib/h')\nvar Header = require('lib/widgets/header')\nvar Range = require('lib/params/range')\n\nmodule.exports = function renderBitcrusher (node) {\n  return h('ProcessorNode -bitcrusher', [\n    Header(node, h('span', 'Bitcrusher')),\n    h('ParamList', [\n      Range(node.bitDepth, {\n        title: 'bit depth',\n        defaultValue: 8,\n        format: 'bit',\n        flex: true\n      }),\n      Range(node.frequency, {\n        title: 'freq',\n        defaultValue: 1,\n        format: 'sampleRatio',\n        flex: true\n      })\n    ])\n  ])\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/chromatic-chunk/object.js":"\nvar ObservStruct = require('observ-struct')\nvar Observ = require('observ')\nvar Property = require('observ-default')\nvar ObservVarhash = require('observ-varhash')\nvar NodeArray = require('observ-node-array')\nvar NodeVarhash = require('observ-node-array/varhash')\nvar SingleNode = require('observ-node-array/single')\n\nvar ArrayGrid = require('array-grid')\n\nvar computed = require('observ/computed')\nvar lookup = require('observ-node-array/lookup')\nvar merge = require('observ-node-array/merge')\nvar watch = require('observ/watch')\nvar ExternalRouter = require('lib/external-router')\n\nvar Param = require('audio-slot-param')\nvar applyParams = require('lib/apply-params')\nvar destroyAll = require('lib/destroy-all')\n\nmodule.exports = ChromaticChunk\n\nfunction ChromaticChunk (parentContext) {\n  var context = Object.create(parentContext)\n\n  var output = context.output = context.audio.createGain()\n  context.output.connect(parentContext.output)\n\n  var scaleSlots = NodeArray(context)\n\n  var defaultScale = {\n    offset: 0,\n    notes: [0,2,4,5,7,9,11]\n  }\n\n  var volume = Property(1)\n  var overrideVolume = Property(1)\n\n  var obs = ObservStruct({\n    id: Observ(),\n    shape: Property([1,4]),\n\n    templateSlot: SingleNode(context),\n\n    scale: Property(defaultScale),\n    offset: Param(parentContext, 0),\n\n    slots: NodeArray(context),\n    inputs: Property([]),\n    outputs: Property(['output']),\n    volume: volume,\n\n    params: Property([]),\n    paramValues: NodeVarhash(parentContext),\n\n    routes: ExternalRouter(context, {output: '$default'}, computed([volume, overrideVolume], multiply)),\n    flags: Property([]),\n    chokeAll: Property(false),\n    color: Property([255,255,255]),\n    selectedSlotId: Observ()\n  })\n\n  obs.overrideVolume = overrideVolume\n  obs.params.context = context\n\n  if (context.setup) {\n    obs.selected = computed([obs.id, context.setup.selectedChunkId], function (id, selectedId) {\n      return id === selectedId\n    })\n  }\n\n  context.offset = obs.offset\n\n  var globalScale = Property(defaultScale)\n  if (context.globalScale){\n    var releaseGlobalScale = watch(context.globalScale, globalScale.set)\n  }\n\n  var scale = computed([obs.scale, globalScale], function(scale, globalScale){\n    if (scale === '$global'){\n      return globalScale\n    } else if (scale instanceof Object) {\n      return scale\n    } else {\n      return defaultScale\n    }\n  })\n\n  obs.output = context.output\n  obs.context = context\n  context.chunk = obs\n\n  obs.volume(function(value){\n    output.gain.value = value\n  })\n\n  context.slotLookup = merge([\n    lookup(scaleSlots, 'id'),\n    lookup(obs.slots, 'id')\n  ])\n\n  var computedSlots = computed([obs.templateSlot, scale, obs.shape], function(template, scale, shape){\n    var length = (shape[0]*shape[1])||0\n    var result = []\n    for (var i=0;i<length;i++){\n      if (template){\n        var slot = obtainWithParams(template, {\n          id: String(i),\n          value: i,\n          scale: scale\n        })\n        if (slot){\n          result.push(slot)\n        }\n      }\n    }\n    return result\n  })\n\n  computedSlots(scaleSlots.set)\n\n\n  obs.triggerOn = function(id, at){\n    var slot = context.slotLookup.get(id)\n\n    if (obs.chokeAll()){\n      scaleSlots.forEach(function(slot){\n        slot.choke(at)\n      })\n    }\n\n    if (slot){\n      slot.triggerOn(at)\n    }\n  }\n\n  obs.triggerOff = function(id, at){\n    var slot = context.slotLookup.get(id)\n    if (slot){\n      slot.triggerOff(at)\n    }\n  }\n\n  obs.getSlot = function(id){\n    return context.slotLookup.get(id)\n  }\n\n  obs.triggers = computed([obs.id, obs.shape], function(id, shape){\n    var length = Array.isArray(shape) && shape[0] * shape[1] || 0\n    var result = []\n    for (var i=0;i<length;i++){\n      result.push(String(i))\n    }\n    return result\n  })\n\n  obs.resolved = ObservStruct({\n    slotLookup: context.slotLookup\n  })\n\n  obs.grid = computed([obs.triggers, obs.shape], ArrayGrid)\n\n  obs.resolvedGrid = computed([obs.triggers, obs.shape], function(triggers, shape){\n    return ArrayGrid(triggers.map(getGlobalId), shape)\n  })\n\n  obs.destroy = function () {\n    scaleSlots.destroy()\n    destroyAll(obs)\n    releaseGlobalScale && releaseGlobalScale()\n    releaseGlobalScale = null\n  }\n\n  applyParams(obs)\n\n  return obs\n\n  // scoped\n\n  function getGlobalId (id) {\n    if (id) {\n      return obs.id() + '/' + id\n    }\n  }\n}\n\nfunction getNewValue (object, value) {\n  if (object instanceof Object && !Array.isArray(object)){\n    var v = obtain(object)\n    v.value = getNewValue(v.value, value)\n    return v\n  } else {\n    return value\n  }\n}\n\nfunction getValue (object, defaultValue) {\n  if (object instanceof Object && !Array.isArray(object)){\n    return getValue(object.value, defaultValue)\n  } else {\n    return object != null ? object : defaultValue\n  }\n}\n\nfunction obtainWithParams (obj, params) {\n  return JSON.parse(JSON.stringify(obj, function(k,v){\n    if (v && v.$param){\n      return params[v.$param]\n    } else {\n      return v\n    }\n  }))\n}\n\nfunction obtain (obj) {\n  return JSON.parse(JSON.stringify(obj))\n}\n\nfunction mod (n, m) {\n  return ((n%m)+m)%m\n}\n\nfunction getNote (scale, offset) {\n  scale = Array.isArray(scale) ? scale : [0,1,2,3,4,5,6,7,8,9,10,11]\n  var position = mod(offset, scale.length)\n  var multiplier = Math.floor(offset/scale.length)\n  return scale[position] + multiplier * 12\n}\n\nfunction multiply (a, b) {\n  return a * b\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/lib/external-router.js":"var ObservVarhash = require('observ-varhash')\nvar nextTick = require('next-tick')\nvar watchThrottle = require('throttle-observ/watch')\n\nmodule.exports = ExternalRouter\n\nfunction ExternalRouter (context, defaultValue, volume) {\n  var obs = ObservVarhash()\n  obs.context = context\n\n  var externalConnections = []\n  var refreshing = false\n\n  var connections = {}\n  var gains = {}\n\n  var set = obs.set\n  obs.set = function (v) {\n    set(v == null ? defaultValue : v)\n  }\n\n  if (typeof volume === 'function') {\n    volume(function (value) {\n      Object.keys(gains).forEach(function (key) {\n        gains[key].gain.value = value\n      })\n    })\n  }\n\n  obs(obs.refresh)\n\n  obs.refresh = function () {\n    if (!refreshing) {\n      refreshing = true\n      nextTick(refresh)\n    }\n  }\n\n  var releaseWatcher = context.chunkLookup ? watchThrottle(context.chunkLookup, 500, obs.refresh) : null\n\n  obs.destroy = function(){\n    Object.keys(gains).forEach(function (key) {\n      gains[key].disconnect()\n      delete gains[key]\n    })\n    releaseWatcher && releaseWatcher()\n    releaseWatcher = null\n    // destroy all the child nodes\n  }\n\n  return obs\n\n  // scoped\n\n  function refresh () {\n    refreshing = false\n    var routes = obs() || {}\n    Object.keys(routes).forEach(function (from) {\n      var target = routes[from]\n      var source = context.slotLookup.get(from)\n\n      if (typeof target === 'string'){\n        target = [target]\n      }\n\n      if (source && Array.isArray(target)){\n        var routed = false\n\n        if (!gains[from]) {\n          gains[from] = context.audio.createGain()\n          gains[from].gain.value = volume && volume() || 1\n          source.connect(gains[from])\n        }\n\n        if (!connections[from]) {\n          connections[from] = []\n        }\n\n        var destinations = target.map(function (to) {\n          if (to && typeof to === 'string') {\n            if (to === '$default') {\n              return context.output\n            } else {\n              to = to.split('#')\n              var destinationChunk = context.chunkLookup.get(to[0])\n              var destinationSlot = destinationChunk && destinationChunk.getSlot(to[1])\n              if (destinationSlot && destinationSlot.input) {\n                return destinationSlot.input\n              }\n            }\n          }\n        }).filter(present)\n\n        destinations.forEach(function (output) {\n          if (!~connections[from].indexOf(output)) {\n            gains[from].connect(output)\n            connections[from].push(output)\n          }\n        })\n\n        connections[from] = connections[from].filter(function (output) {\n          if (!~destinations.indexOf(output)) {\n            gains[from].disconnect(output)\n            return false\n          } else {\n            return true\n          }\n        })\n      }\n    })\n\n    Object.keys(gains).forEach(function (key) {\n      if (!routes[key]) {\n        gains[key].disconnect()\n        delete gains[key]\n      }\n    })\n  }\n}\n\nfunction present (value) {\n  return value\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/loop-grid/grid.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar send = require('value-event/event')\nvar MPE = require('lib/mouse-position-event')\nvar MouseDragEvent = require('lib/mouse-drag-event')\nvar nextTick = require('next-tick')\nvar getBaseName = require('path').basename\nvar GridStateHook = require('./grid-state-hook.js')\nvar read = require('lib/read')\nvar extend = require('xtend')\nvar Thunk = require('vdom-thunk')\n\nvar QueryParam = require('lib/query-param')\n\nmodule.exports = function renderGrid (controller) {\n  var context = controller.context\n  var setup = context.setup\n  var chunks = getChunks(controller)\n  var playback = controller.playback\n  var shape = playback.shape()\n\n  return h('LoopGrid', {\n    className: shape[1] > 16 ? '-min' : '',\n    'ev-dragover': MPE(dragOver, controller),\n    'ev-drop': MPE(drop, controller),\n    'ev-dragleave': MPE(dragLeave, controller),\n    'ev-dragenter': MPE(dragEnter, controller)\n  }, [\n    Thunk(renderRows, controller, shape[0], shape[1]),\n    h('div.chunks', chunks.map(function (chunk) {\n      return renderChunkBlock(chunk, controller)\n    }))\n  ])\n}\n\nfunction renderRows (controller, rows, cols) {\n  var children = []\n  for (var r = 0; r < rows; r++) {\n    var buttons = []\n    for (var c = 0; c < cols; c++) {\n      buttons.push(h('div.button', {\n        'ev-dragenter': MPE(enterButton, controller),\n        'ev-dragleave': MPE(leaveButton, controller)\n      }))\n    }\n    children.push(h('div.row', buttons))\n  }\n  return h('div.rows', {'ev-state': GridStateHook(controller.gridState)}, children)\n}\n\nfunction renderChunkBlock(chunk, controller){\n  var setup = controller.context.setup\n  var shape = controller.playback.shape()\n\n  var selectedChunkId = setup.selectedChunkId()\n  var box = {\n    top: chunk.origin[0] / shape[0],\n    bottom: (chunk.origin[0] + chunk.shape[0]) / shape[0],\n    left: chunk.origin[1] / shape[1],\n    right: (chunk.origin[1] + chunk.shape[1]) / shape[1]\n  }\n\n  var style = {\n    'top': percent(box.top),\n    'height': percent(box.bottom - box.top),\n    'left': percent(box.left),\n    'width': percent(box.right - box.left),\n    'border-color': color(chunk.color, 1),\n    'background-color': color(chunk.color, 0.1),\n    'color': color(mixColor(chunk.color, [255,255,255]),1)\n  }\n\n  var node = setup.chunks.lookup.get(chunk.id)\n\n  return h('div.chunk', {\n    className: selectedChunkId == chunk.id ? '-selected' : null,\n    style: style,\n    draggable: true,\n    'ev-click': send(selectChunk, { chunkId: chunk.id, controller: controller }),\n    'ev-dblclick': send(toggleChunk, node),\n    'ev-dragstart': MPE(startDrag, node),\n    'ev-dragend': MPE(endDrag, node)\n  },[\n    h('span.label', chunk.id),\n    chunk.resizable ? [\n      h('div.handle -bottom', {\n        draggable: true,\n        'ev-mousedown': MouseDragEvent(resize, { edge: 'bottom', node: node, shape: shape })\n      }),\n      h('div.handle -right', {\n        draggable: true,\n        'ev-mousedown': MouseDragEvent(resize, { edge: 'right', node: node, shape: shape })\n      })\n    ] : null\n  ])\n}\n\nfunction resize(ev){\n  var edge = this.data.edge\n  var node = this.data.node\n  var shape = this.data.shape\n\n  if (ev.type === 'mousedown'){\n    this.lastOffset = 0\n    this.startValue = QueryParam(node, 'shape').read()\n    this.start = ev\n  } else if (this.start) {\n    if (edge === 'bottom'){\n      var offset = Math.round((ev.y - this.start.y) / 30)\n      if (this.lastOffset !== offset){\n        QueryParam(node, 'shape').set([ clamp1(this.startValue[0]+offset), this.startValue[1] ])\n        this.lastOffset = offset\n      }\n    } else if (edge === 'right'){\n      var offset = Math.round((ev.x - this.start.x) / (248 / shape[1]))\n      if (this.lastOffset !== offset){\n        QueryParam(node, 'shape').set([ this.startValue[0], clamp1(this.startValue[1]+offset) ])\n        this.lastOffset = offset\n      }\n    }\n  }\n\n}\n\nfunction clamp1(val){\n  return Math.max(val, 1)\n}\n\nfunction getChunks(controller){\n  var context = controller.context\n  var chunkPositions = controller.chunkPositions ? controller.chunkPositions() : {}\n  var chunks = []\n  for (var k in chunkPositions){\n\n    var chunk = context.chunkLookup.get(k)\n\n    if (chunk){\n      var data = chunk()\n      chunks.push({\n        id: data.id,\n        color: data.color,\n        shape: data.shape,\n        origin: chunkPositions[k],\n\n        // HACK: find a better way to detect/set this\n        resizable: !!chunk.templateSlot || !chunk.slots\n\n      })\n    }\n\n  }\n  return chunks\n}\n\nfunction enterButton(ev) {\n  ev.currentTarget.classList.add('-dragOver')\n}\n\nfunction leaveButton(ev) {\n  ev.currentTarget.classList.remove('-dragOver')\n}\n\nfunction startDrag (ev) {\n  var node = (ev.data.resolved || ev.data)()\n  ev.dataTransfer.setData('loop-drop/' + node.node.split('/')[0], JSON.stringify(node))\n  window.currentDrag = ev\n}\n\nfunction endDrag(ev){\n  window.currentDrag = null\n}\n\nvar cloneDrag = null\nvar entering = null\nfunction dragLeave(ev){\n  var controller = ev.data\n  if (window.currentDrag && (!entering || entering !== controller)){\n    var chunkId = getId(currentDrag.data)\n    if (chunkId && !ev.altKey && !ev.shiftKey){\n      controller.chunkPositions.delete(chunkId)\n    }\n  }\n}\nfunction dragEnter(ev){\n  entering = ev.data\n\n  setTimeout(function(){\n    entering = null\n  }, 1)\n}\n\nfunction getId(chunk){\n  if (typeof chunk== 'function'){\n    chunk = chunk()\n  }\n\n  if (chunk){\n    return chunk.id\n  }\n}\n\nfunction dragOver(ev){\n  var controller = ev.data\n  var currentDrag = window.currentDrag\n\n  if (currentDrag){\n\n    if (ev.altKey || ev.shiftKey) {\n      cloneDrag = currentDrag\n      ev.dataTransfer.dropEffect = 'copy'\n    } else {\n      var chunkId = getId(currentDrag.data)\n\n      if (chunkId){\n        var shape = controller.playback.shape()\n        var height = ev.offsetHeight / shape[0]\n        var width = ev.offsetWidth / shape[1]\n\n        var x = ev.offsetX - currentDrag.offsetX\n        var y = ev.offsetY - currentDrag.offsetY\n\n        var r = Math.round(y/width)\n        var c = Math.round(x/width)\n\n        var currentValue = controller.chunkPositions.get(chunkId)\n\n        if (!currentValue || currentValue[0] !== r || currentValue[1] !== c){\n          controller.chunkPositions.put(chunkId, [r,c])\n        }\n      }\n\n      if (ev.dataTransfer.types.length) {\n        // HACK: detect when dragging from chunks - prevent remove\n        // need to rewrite all the drag and drop to be native, without currentDrag hacks\n        ev.dataTransfer.dropEffect = 'link'\n      } else {\n        ev.dataTransfer.dropEffect = 'move'\n      }\n      cloneDrag = null\n    }\n\n    ev.event.preventDefault()\n  } else if (~ev.dataTransfer.types.indexOf('filepath')){\n    ev.dataTransfer.dropEffect = 'copy'\n    ev.event.preventDefault()\n  }\n}\n\nfunction drop(ev){\n  var path = ev.dataTransfer.getData('filepath')\n  var controller = ev.data\n  var actions = controller.context.actions\n  var setup = controller.context.setup\n  var fileObject = setup.context.fileObject\n\n  var shape = controller.playback.shape()\n  var height = ev.offsetHeight / shape[0]\n  var width = ev.offsetWidth / shape[1]\n  var r = Math.floor(ev.offsetY/height)\n  var c = Math.floor(ev.offsetX/width)\n\n  var currentDrag = cloneDrag\n  cloneDrag = null\n\n  if (ev.altKey && !path && currentDrag) {\n    var data = currentDrag.data()\n    if (data) {\n      if (data.node === 'external') {\n        // duplicate external file\n        path = fileObject.resolvePath(data.src)\n      } else {\n        // duplicate local chunk\n        var id = setup.chunks.resolveAvailable(data.id)\n        var chunk = setup.chunks.push(extend(data, {\n          id: id\n        }))\n        controller.chunkPositions.put(id, [r,c])\n        return\n      }\n    }\n  }\n\n  if (path && setup && setup.chunks){\n\n    actions.importChunk(path, setup.context.cwd, function(err, newPath) {\n      if (err) throw err\n\n      var id = getBaseName(newPath, '.json')\n      setup.chunks.push({\n        'node': 'external',\n        'id': id,\n        'src': fileObject.relative(newPath),\n        'minimised': true,\n        'routes': {output: '$default'},\n        'scale': '$global'\n      })\n\n      controller.chunkPositions.put(id, [r,c])\n    })\n\n  }\n}\n\nfunction getElementMouseOffset(offsetX, offsetY, clientX, clientY){\n  return [clientX - offsetX, clientY - offsetY]\n}\n\nfunction getOffset(start, end, size){\n  var difference = (end - start) / size\n  return Math.round(difference)\n}\n\nfunction percent(decimal){\n  return (decimal * 100) + '%'\n}\n\nfunction color(rgb, a){\n  if (!Array.isArray(rgb)){\n    rgb = [100,100,100]\n  }\n  return 'rgba(' + rgb[0] +','+rgb[1]+','+rgb[2]+','+a+')'\n}\n\nfunction mixColor(a, b){\n  if (!Array.isArray(a)){\n    return b\n  }\n  return [\n    (a[0] + a[0] + b[0]) / 3,\n    (a[1] + a[0] + b[1]) / 3,\n    (a[2] + a[0] + b[2]) / 3\n  ]\n}\n\nfunction toggleChunk(chunk){\n  var minimised = chunk.minimised || QueryParam(chunk, 'minimised')\n  minimised.set(!read(minimised))\n}\n\nfunction selectChunk(target){\n  var controller = target.controller\n  var setup = controller.context.setup\n  var actions = controller.context.actions\n  controller.grabInput && controller.grabInput()\n  setup.selectedChunkId.set(target.chunkId)\n  actions.scrollToSelectedChunk()\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/loop-grid/grid-state-hook.js":"var watch = require('observ/watch')\nvar nextTick = require('next-tick')\n\nmodule.exports = GridStateHook\n\nfunction GridStateHook(gridState){\n  if (!(this instanceof GridStateHook)) return new GridStateHook(gridState)\n  this.gridState = gridState\n}\n\nfunction updateRows(data){\n  var node = this\n  var playing = data.playing\n  var active = data.active\n  var triggers = data.triggers\n  var recording = data.recording\n\n  for (var r=0;r<triggers.shape[0];r++){\n    for (var c=0;c<triggers.shape[1];c++){\n      var button = node.childNodes[r].childNodes[c]\n      var classes = '.button'\n\n      if (triggers.get(r,c)) classes += ' -present'\n      if (playing.get(r,c)) classes += ' -playing'\n      if (recording.get(r,c)) classes += ' -recording'\n      if (active.get(r,c)) classes += ' -active'\n      //if (buttonState.noRepeat) classes += ' -noRepeat'\n    \n      if (button.className !== classes){\n        button.className = classes\n      }\n    }\n  }\n}\n\nGridStateHook.prototype.hook = function(node, prop, prev){\n  var self = this\n  if (!prev || prev.gridState !== self.gridState){\n    self.removeListener && self.removeListener()\n    if (self.gridState){\n      nextTick(function(){\n        self.removeListener = watch(self.gridState, updateRows.bind(node))\n      })\n    }\n  }\n}\n\nGridStateHook.prototype.unhook = function(node, prop, next){\n  if (next){\n    next.removeListener = this.removeListener\n  } else {\n    this.removeListener && this.removeListener()\n  }\n}","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/loop-grid-launchpad-mk2/apply-color-filter.js":"var computed = require('observ/computed')\nvar ArrayGrid = require('array-grid')\nvar Observ = require('observ-default')\n\nmodule.exports = applyColorFilter\n\nfunction applyColorFilter (input, options) {\n  var active = options && options.active\n  if (typeof active !== 'function') {\n    active = Observ(true)\n  }\n  return computed([input, active], function computeMapGridValues (input, active) {\n    return ArrayGrid(input.data.map(function (value, i) {\n      if (active.data && active.data[i] || active === true) {\n        if (options.saturate != null) {\n          value = saturate(value, options.saturate)\n        }\n        if (options.add != null) {\n          value = add(value, options.add)\n        }\n        if (options.multiply != null) {\n          value = multiply(value, options.multiply)\n        }\n        return [ clamp(value[0]), clamp(value[1]), clamp(value[2]) ]\n      } else {\n        return null\n      }\n    }), input.shape)\n  })\n}\n\nfunction multiply (rgb, value) {\n  if (typeof value === 'number') {\n    value = [value, value, value]\n  }\n  return [\n    rgb[0] * value[0],\n    rgb[1] * value[1],\n    rgb[2] * value[2]\n  ]\n}\n\nfunction clamp (value) {\n  if (value > 255) return 255\n  if (value < 0) return 0\n  return value\n}\n\nfunction add (rgb, value) {\n  if (typeof value === 'number') {\n    value = [value, value, value]\n  }\n  return [\n    rgb[0] + value[0],\n    rgb[1] + value[1],\n    rgb[2] + value[2]\n  ]\n}\n\nfunction saturate (rgb, value) {\n  var gray = getLum(rgb)\n  return [\n    -gray * (value - 1) + rgb[0] * value,\n    -gray * (value - 1) + rgb[1] * value,\n    -gray * (value - 1) + rgb[2] * value\n  ]\n}\n\nfunction getLum (rgb) {\n  return 0.2989 * rgb[0] + 0.5870 * rgb[1] + 0.1140 * rgb[2]\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/loop-grid-launchpad-mk2/chunk-colors.js":"var computed = require('observ/computed')\nvar ArrayGrid = require('array-grid')\nvar Observ = require('observ')\n\nmodule.exports = ChunkColors\n\nfunction ChunkColors (chunkLookup, selected, targets, shape) {\n  var highlighted = Observ()\n  var timer = null\n\n  highlighted.clear = function () {\n    highlighted.set(null)\n  }\n\n  selected(function (id) {\n    clearTimeout(timer)\n    highlighted.set(id)\n    timer = setTimeout(highlighted.clear, 400)\n  })\n\n  return computed([chunkLookup, targets, shape, highlighted], function computeMapGridValues (chunkLookup, targets, shape, highlighted) {\n    var result = ArrayGrid([], shape)\n    for (var r = 0; r < shape[0]; r++) {\n      for (var c = 0; c < shape[1]; c++) {\n        var id = getChunkId(targets[result.index(r, c)])\n        var chunk = chunkLookup[id]\n        if (chunk) {\n          var color = saturate(notBlack(chunk.color, [5, 5, 5]), 2)\n          if (highlighted === id) {\n            color = normalize(color, 1)\n          } else {\n            color = normalize(color, 0.2)\n          }\n          result.set(r, c, color)\n        }\n      }\n    }\n    return result\n  })\n}\n\nfunction getChunkId (id) {\n  if (id && id.split) {\n    return id.split('/')[0]\n  }\n}\n\nfunction getLum (rgb) {\n  return 0.2989 * rgb[0] + 0.5870 * rgb[1] + 0.1140 * rgb[2]\n}\nfunction multiply (rgb, value) {\n  return [rgb[0] * value, rgb[1] * value, rgb[2] * value]\n}\n\nfunction normalize (rgb, value) {\n  var multiplier = (255 - getLum(rgb)) / 256\n  return multiply(rgb, multiplier * value)\n}\n\nfunction saturate (rgb, value) {\n  var gray = getLum(rgb)\n  return [\n    clamp(-gray * (value - 1) + rgb[0] * value),\n    clamp(-gray * (value - 1) + rgb[1] * value),\n    clamp(-gray * (value - 1) + rgb[2] * value)\n  ]\n}\n\nfunction clamp (value) {\n  if (value > 255) return 255\n  if (value < 0) return 0\n  return value\n}\n\nfunction notBlack (color, fallback) {\n  if (!color || (color[0] === 0 && color[1] === 0 && color[2] === 0)) {\n    return fallback\n  } else {\n    return color\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/loop-grid-launchpad-mk2/set-lights.js":"module.exports = setLights\n\nvar setRgb = [240, 0, 32, 41, 2, 24, 11]\nvar setPulse = [240, 0, 32, 41, 2, 24, 40]\n\nvar off = [0, 0, 0]\n\nfunction setLights (state, stream) {\n  var currentState = {}\n  stream(function (port) {\n    if (port) {\n      var toUpdate = []\n      var toPulse = []\n\n      Object.keys(currentState).forEach(function (key) {\n        var id = parseInt(key, 10)\n        var rgb = currentState[key] || off\n        if (Array.isArray(rgb)) {\n          toUpdate.push(id, format(rgb[0]), format(rgb[1]), format(rgb[2]))\n        } else {\n          toPulse.push(0, id, rgb)\n        }\n      })\n      if (toUpdate.length) {\n        stream.write(setRgb.concat(toUpdate.slice(0, 64), 247))\n        if (toUpdate.length > 64) {\n          stream.write(setRgb.concat(toUpdate.slice(64), 247))\n        }\n      }\n      if (toPulse.length) {\n        stream.write(setRgb.concat(toPulse, 247))\n      }\n    }\n  })\n  return state(function (value) {\n    var toUpdate = []\n    var toPulse = []\n\n    for (var r = 0; r < value.shape[0]; r++) {\n      for (var c = 0; c < value.shape[1]; c++) {\n        var id = ((8 - r) * 10) + (c + 1)\n        if (!same(currentState[id], value.get(r, c))) {\n          var rgb = currentState[id] = value.get(r, c) || off\n          if (Array.isArray(rgb)) {\n            toUpdate.push(id, format(rgb[0]), format(rgb[1]), format(rgb[2]))\n          } else {\n            toPulse.push(0, id, rgb)\n          }\n        }\n      }\n    }\n    if (toUpdate.length) {\n      stream.write(setRgb.concat(toUpdate, 247))\n    }\n    if (toPulse.length) {\n      stream.write(setPulse.concat(toPulse, 247))\n    }\n  })\n}\n\nfunction format (value) {\n  return Math.floor(value / 4)\n}\n\nfunction same (a, b) {\n  if (a == null && b == null) {\n    return true\n  } else {\n    return (a === b) || (typeof a !== 'number' && a && b && a[0] === b[0] && a[1] === b[1] && a[2] === b[2])\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/loop-grid-launchpad/state-lights.js":"var self = module.exports = function(r, g, flag){\n  if (!r || r < 0)  r = 0\n  if (r > 3)        r = 3\n  if (!g || g < 0)  g = 0\n  if (g > 3)        g = 3\n  if (flag == 'flash') {\n    flag = 8\n  } else if (flag == 'buffer') {\n    flag = 0\n  } else {\n    flag = 12\n  }\n  \n  return ((16 * g) + r) + flag\n}\n\nself.off = 0\nself.greenLow = self(0,1)\nself.greenMed = self(0,2)\nself.green = self(0,3)\nself.greenFlash = self(0,3, 'flash')\nself.redLow = self(1,0)\nself.redMed = self(2,0)\nself.red = self(3,0)\nself.amberLow = self(1,1)\nself.amber = self(3,3)\nself.yellow = self(1,3)","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/loop-grid-push/push-colors.js":"// Ableton Push colors\n// Written by Fabio Neves - fzero.ca / nostep.ca / github.com/fzero\n//\n// Adapted from Push4Bitwig\n// https://github.com/git-moss/Push4Bitwig\n// Written by Jürgen Moßgraber - mossgrabers.de\n//            Michael Schmalle - teotigraphix.com\n// (c) 2014-2015\n// Licensed under LGPLv3 - http://www.gnu.org/licenses/lgpl-3.0.txt\n\n// Buttons including row below the display\nmodule.exports.buttons = {\n  off: 0,\n  redLow: 1,\n  redLowSlowBlink: 2,\n  redLowFastBlink: 3,\n  redHi: 4,\n  redHiSlowBlink: 5,\n  redHiFastBlink: 6,\n  amberLow: 7,\n  amberLowSlowBlink: 8,\n  amberLowFastBlink: 9,\n  amberHi: 10,\n  amberHiSlowBlink: 11,\n  amberHiFastBlink: 12,\n  yellowLow: 13,\n  yellowLowSlowBlink: 14,\n  yellowLowFastBlink: 15,\n  yellowHi: 16,\n  yellowHiSlowBlink: 17,\n  yellowHiFastBlink: 18,\n  greenLow: 19,\n  greenLowSlowBlink: 20,\n  greenLowFastBlink: 21,\n  greenHi: 22,\n  greenHiSlowBlink: 23,\n  greenHiFastBlink: 24\n};\n\n// Pads including row above the pads\nmodule.exports.pads = {\n  off: 0,\n  greyLow: 1,\n  grey: 2,\n  white: 3,\n  rose: 4,\n  redHi: 5,\n  red: 6,\n  redLow: 7,\n  redAmber: 8,\n  amberHi: 9,\n  amber: 10,\n  amberLow: 11,\n  amberYellow: 12,\n  yellowHi: 13,\n  yellow: 14,\n  yellowLow: 15,\n  yellowLime: 16,\n  limeHi: 17,\n  lime: 18,\n  limeLow: 19,\n  limeGreen: 20,\n  greenHi: 21,\n  green: 22,\n  greenLow: 23,\n  greenSpring: 24,\n  springHi: 25,\n  spring: 26,\n  springLow: 27,\n  springTurquoise: 28,\n  turquoiseLow: 29,\n  turquoise: 30,\n  turquoiseHi: 31,\n  turquoiseCyan: 32,\n  cyanHi: 33,\n  cyan: 34,\n  cyanLow: 35,\n  cyanSky: 36,\n  skyHi: 37,\n  sky: 38,\n  skyLow: 39,\n  skyOcean: 40,\n  oceanHi: 41,\n  ocean: 42,\n  oceanLow: 43,\n  oceanBlue: 44,\n  blueHi: 45,\n  blue: 46,\n  blueLow: 47,\n  blueOrchid: 48,\n  orchidHi: 49,\n  orchid: 50,\n  orchidLow: 51,\n  orchidMagenta: 52,\n  magentaHi: 53,\n  magenta: 54,\n  magentaLow: 55,\n  magentaPink: 56,\n  pinkHi: 57,\n  pink: 58,\n  pinkLow: 59\n};\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/loop-grid-push/push-display.js":"// Ableton Push controller support\n// Written by Fabio Neves - fzero.ca / nostep.ca / github.com/fzero\n\nmodule.exports = function(duplexPort) {\n\n  // We need a MIDI duplexPort, or else nothing happens!\n  if (!duplexPort) {\n    console.error(\"PushDisplay: invalid MIDI output\");\n    return null;\n  }\n  this.duplexPort = duplexPort;\n\n\n  /////////////////////////////////////////////////////////////////\n  // Instance methods:\n  // They should all return `this` to allow chaining, as in:\n  // display.setCell(0, 0, \"OHAI\").setCell(0, 1, \"THERE\").update();\n  /////////////////////////////////////////////////////////////////\n\n  // init()\n  //\n  // Initialize display state\n  this.init = function() {\n    this.clear().update();\n    return this;\n  }\n\n\n  // clear()\n  //\n  // Reset display state\n  this.clear = function() {\n    // This stores the curent display state. For all intents\n    // and purposes we'll use it as a 4 row containing 8 columns\n    // of 8 characters. This ensures displayed data lines up with\n    // pads, buttons and knobs.\n    var EMPTY = '        '; // 8 spaces\n    this.cells = [\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY],\n      [EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY]\n    ];\n    return this;\n  }\n\n\n  // setCell(Number row, Number col, String string)\n  //\n  // Self-explanatory, except for the fact it DOESN'T update\n  // the display right away.\n  this.setCell = function(row, col, string) {\n    // Each column must have exactly 8 chars\n    if (string.length < 8) string += ' '.repeat(8 - string.length);\n    string = string.substr(0, 8);\n\n    this.cells[row][col] = string;\n    return this;\n  }\n\n\n  // update([Array rows]])\n  //\n  // Updates the display with the content of `this.cells`.\n  // Uses `rows` when provided.\n  this.update = function(rows) {\n    var sysExOut = [\n      [0xF0, 0x47, 0x7F, 0x15, 0x18, 0x00, 0x45, 0x00],\n      [0xF0, 0x47, 0x7F, 0x15, 0x19, 0x00, 0x45, 0x00],\n      [0xF0, 0x47, 0x7F, 0x15, 0x1A, 0x00, 0x45, 0x00],\n      [0xF0, 0x47, 0x7F, 0x15, 0x1B, 0x00, 0x45, 0x00]\n    ];\n    var TERMINATOR = 0xF7;\n\n    // Build display rows, unless provided.\n    if (!rows) {\n      var rows = [];\n      for (var row = 0; row < 4; row++) {\n        var row_data = '';\n        for (var col = 0; col < this.cells[row].length; col += 2) { // Note the increment\n          row_data += this.cells[row][col] + ' ' + this.cells[row][col + 1];\n        }\n        rows.push(row_data);\n      }\n    }\n\n    // We need exactly 4 rows.\n    if (rows.length !== 4) {\n      console.error(\"PushDisplay.update: you must provide exactly 4 rows\");\n      return null;\n    }\n\n    for (var row = 0; row < 4; row++) {\n      for (var ch = 0; ch < rows[row].length; ch++) {\n        sysExOut[row].push(rows[row].charCodeAt(ch));\n      }\n      sysExOut[row].push(TERMINATOR);\n      this.duplexPort.write(sysExOut[row]);\n    }\n\n    return this;\n  }\n\n\n  // First init\n  this.init();\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/loop-grid-qwerty/input-stack.js":"var watch = require('observ/watch')\nvar Observ = require('observ')\n\nmodule.exports = InputStack\n\nfunction InputStack(){\n\n  var keysDown = null\n  var stack = []\n  var release = null\n\n  function grab(){\n    var input = this\n    var index = stack.indexOf(input)\n    if (!stack.length || index < stack.length - 1){\n\n      release&&release()\n\n      if (stack.length){\n        stack[stack.length-1].set([])\n      }\n\n      if (~index){\n        stack.splice(index, 1)\n      }\n      stack.push(input)\n      release = activate(input)\n    }\n  }\n\n  function close(){\n    var input = this\n\n    if (stack.length){\n      var index = stack.indexOf(input)\n      if (index === stack.length-1){\n        release&&release()\n        stack.pop()\n        release = activate(stack[stack.length-1])\n      }\n    }\n\n    input.set([])\n  }\n\n  function activate(input) {\n    if (input) {\n      var releaseInput = watch(getKeysDown(), input.set)\n      input.active.set(true)\n\n      return function() {\n        releaseInput()\n        input.active.set(false)\n      }\n    }\n  }\n\n  function next(){\n    if (stack.length > 1){\n      var input = stack.pop()\n      release&&release()\n      input.set([])\n      input.active.set(false)\n\n      stack.unshift(input)\n      release = activate(stack[stack.length-1])\n    }\n  }\n\n  function swap(){\n    if (stack.length > 1){\n      var input = stack.pop()\n      release&&release()\n      input.set([])\n      input.active.set(false)\n      stack.splice(-1, 0, input)\n      release = activate(stack[stack.length-1])\n    }\n  }\n\n  function getKeysDown(){\n    return keysDown = keysDown || KeysDown()\n  }\n\n  function handleKey(e) {\n    var el = document.activeElement\n    if (stack.length) {\n      if (!el || (!shouldIgnore(el) && el.contentEditable !== 'true')){\n        if ((e.code === 'Tab' || e.code === 'Enter') && e.type === 'keydown') { // tab or enter\n          e.preventDefault()\n          next()\n        } else if (e.code === 'AltLeft' || e.code === 'AltRight') { // alt\n          e.preventDefault()\n          swap()\n        }\n      }\n    }\n  }\n\n  document.addEventListener('keydown', handleKey, false)\n  document.addEventListener('keyup', handleKey, false)\n\n  return function(){\n    var input = Observ([])\n    input.active = Observ()\n    input.grab = grab.bind(input)\n    input.close = close.bind(input)\n    input.grab()\n    return input\n  }\n\n}\n\n\nfunction shouldIgnore(el){\n  return (el.nodeName === 'INPUT' && el.type !== 'range' && el.type !== 'checkbox') ||\n          el.nodeName === 'TEXTAREA'\n}\n\nfunction KeysDown () {\n\n  var obs = Observ([])\n\n  function handleEvent (e) {\n    var el = document.activeElement\n    if (!el || (!shouldIgnore(el) && el.contentEditable !== 'true')){\n      var index = obs().indexOf(e.code)\n      if (e.type === 'keydown'){\n        if (!~index){\n          var val = obs().concat()\n          val.push(e.code)\n          obs.set(val)\n          e.preventDefault()\n        }\n      } else if (e.type === 'keyup'){\n        if (~index){\n          var val = obs().concat()\n          val.splice(index, 1)\n          obs.set(val)\n        }\n      }\n    }\n  }\n\n  document.addEventListener('keydown', handleEvent, false)\n  document.addEventListener('keyup', handleEvent, false)\n\n  obs.destroy = function(){\n    document.removeEventListener('keydown', handleEvent, false)\n    document.removeEventListener('keyup', handleEvent, false)\n  }\n\n  return obs\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/loop-grid/suppressor.js":"var Observ = require('observ')\nvar ArrayGrid = require('array-grid')\nvar getEvents = require('loop-grid/lib/get-events')\n\nmodule.exports = function (transform, shape, stride) {\n  var self = Observ(ArrayGrid([], resolve(shape), resolve(stride)))\n\n  var release = null\n  var doneCallback = null\n\n  var set = self.set\n  self.set = null\n\n  self.start = function (at, suppressIndexes, freezeIndexes, done) {\n    self.stop()\n\n    suppressIndexes = suppressIndexes || []\n    freezeIndexes = freezeIndexes || []\n\n    // transform\n    release = transform(suppress, at, suppressIndexes, freezeIndexes)\n\n    // update observable grid\n    var data = suppressIndexes.reduce(function (result, index) {\n      result[index] = true\n      return result\n    }, [])\n\n    set(ArrayGrid(data, resolve(shape), resolve(stride)))\n\n    doneCallback = done\n  }\n\n  self.stop = function () {\n    if (release) {\n      set(ArrayGrid([], resolve(shape), resolve(stride)))\n      release()\n      release = null\n      if (typeof doneCallback === 'function') {\n        doneCallback()\n        doneCallback = null\n      }\n    }\n  }\n\n  return self\n}\n\nfunction suppress (input, start, indexes, freezeIndexes) {\n  input.data.forEach(function (loop, i) {\n    if (loop && (!indexes.length || ~indexes.indexOf(i))) {\n      if (!indexes.length && ~freezeIndexes.indexOf(i)) {\n        // HACK: this could be handled a lot more elegantly\n        // and also when to use freezeIndexes is pretty poor\n        var events = getEvents(loop, start, start + 0.01, 0)\n        if (events.length && events[0][1]) {\n          loop.events = [[0, true]]\n        } else {\n          loop.events = []\n        }\n      } else {\n        loop.events = []\n      }\n    }\n  })\n  return input\n}\n\nfunction resolve (obs) {\n  return typeof obs === 'function' ? obs() : obs\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/oscillator/shape-choices.js":"module.exports = [\n  ['Basic Shapes', [\n    ['Sine', 'sine'],\n    ['Square', 'square'],\n    ['Sawtooth', 'sawtooth'],\n    ['Triangle', 'triangle']\n  ]],\n  ['Wave Tables', [\n    ['Bass', 'bass'],\n    ['Bass Fuzz', 'bass-fuzz'],\n    ['Bass Sub', 'bass-sub'],\n    ['Brass', 'brass'],\n    ['Disonant', 'disonant'],\n    ['Guitar Fuzz', 'guitar-fuzz'],\n    ['Organ', 'organ'],\n    ['Piano', 'piano'],\n    ['Soft Saw', 'soft-saw'],\n    ['Strings', 'strings'],\n    ['Throaty', 'throaty'],\n    ['Trombone', 'trombone'],\n    ['Wide', 'wide'],\n    ['Wurlitzer', 'wurlitzer']\n  ]],\n  ['Phonemes', [\n    ['Ah', 'ah'],\n    ['Ee', 'ee'],\n    ['Ow', 'ow'],\n    ['Ooh', 'ooh']\n  ]]\n]","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/project/browser.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar send = require('value-event/event')\n\nvar getBaseName = require('path').basename\nvar getExt = require('path').extname\nvar join = require('path').join\n\nvar renameWidget = require('lib/rename-widget')\nvar DragEvent = require('lib/drag-event')\n\nvar currentRename = null\n\nmodule.exports = renderBrowser\n\nfunction renderBrowser(entries, project){\n\n  var elements = []\n\n  // render two-level tree\n  if (entries()){\n    entries().forEach(function(entry){\n      var base = getBaseName(entry.path)\n\n      if (entry.type === 'directory' && base !== '~recordings') {\n        elements.push(renderEntry(entry, project))\n        var sub = project.subEntries.get(entry.path)\n        if (sub && sub()){\n          sub().forEach(function(subEntry){\n            var fileName = getBaseName(subEntry.path)\n            var ext = getExt(fileName)\n            if (subEntry.type === 'file' && fileName !== 'index.json' && ext === '.json'){\n              elements.push(renderEntry(subEntry, project))\n            }\n          })\n        }\n      }\n    })\n  }\n\n  return h('ScrollBox', elements)\n}\n\nfunction renderEntry(entry, project){\n\n  var actions = project.actions\n  var selected = project.selected() == entry.path\n\n  var classList = []\n  var expander = ''\n\n  if (project.recordingPath() === entry.path) {\n    classList.push('-recording')\n  }\n\n  if (entry.type === 'directory'){\n    classList.push('-directory')\n    expander = h('button.twirl', {\n      'ev-click': send(actions.toggleDirectory, entry.path)\n    })\n\n    if (project.subEntries.get(entry.path)){\n      classList.push('-open')\n    }\n\n    // handle index.json selected\n    selected = selected || join(entry.path, 'index.json') === project.selected()\n  }\n\n  var renaming = selected && project.renaming()\n  var renameState = { project: project, entry: entry }\n\n  // handle rename click\n  var click = selected ?\n    send(project.renaming.set, true) : null\n\n  if (selected){\n    classList.push('-selected')\n  }\n  if (renaming){\n    classList.push('-renaming')\n    currentRename = renameWidget(entry.fileName, saveRename, cancelRename, renameState)\n  }\n\n  var buttons = [\n    h('button.delete', {\n      'ev-click': send(actions.deleteEntry, entry.path),\n    }, 'delete')\n  ]\n\n  if (renaming){\n    buttons.push(\n      h('button.save', {\n        'ev-click': send(saveRename, renameState)\n      }, 'save'),\n      h('button.cancel', {\n        'ev-click': send(cancelRename, renameState)\n      }, 'cancel')\n    )\n  }\n\n  var nameElement = renaming ?\n    currentRename : h('span', getBaseName(entry.fileName, '.json'))\n\n  return h('BrowserFile', {\n    'data-entry': entry,\n    'draggable': true,\n    'ev-dragstart': DragEvent(dragStart, entry),\n    'ev-click': click,\n    'ev-dblclick': send(actions.open, entry.path),\n    'className': classList.join(' ')\n  }, [expander, nameElement, buttons ])\n}\n\nfunction dragStart(ev){\n  window.currentDrag = null\n  ev.dataTransfer.setData('filepath', ev.data.path)\n}\n\nfunction saveRename(){\n  var project = this.data.project\n  var entry = this.data.entry\n  var actions = project.actions\n\n  if (currentRename){\n    actions.rename(entry.path, currentRename.getValue())\n  }\n\n  project.renaming.set(false)\n}\n\nfunction cancelRename(){\n  var project = this.data.project\n  project.renaming.set(false)\n}\n\nfunction getItemByPath(items, path){\n  var result = null\n  items.some(function(item){\n    if (item.path === path){\n      result = item\n      return true\n    }\n  })\n  return result\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/project/global-controllers.js":"var h = require('lib/h')\nvar send = require('value-event/event')\nvar Select = require('lib/widgets/select')\n\nmodule.exports = function (collection) {\n  var spawners = collection.context.project.availableGlobalControllers()\n  var options = []\n\n  spawners.forEach(function (descriptor) {\n    if (!hasNode(collection, descriptor.node)) {\n      options.push([descriptor.name, descriptor])\n    }\n  })\n\n  return h('div.controllers', [\n    collection.map(function (controller) {\n      if (controller) {\n        return h('GlobalControllerNode', [\n          h('header', [\n            h('span.name', [\n              h('strong', ['Global: ']), controller().name\n            ]),\n            h('button.remove Button -warn', {\n              'ev-click': send(collection.remove, controller),\n            }, 'X')\n          ])\n        ])\n      }\n    }),\n\n    options.length ? h('div.spawn', [\n      Select(spawn, collection, {\n        includeBlank: 'Add Global Controller...',\n        options: options\n      })\n    ]) : null\n  ])\n}\n\nfunction hasNode (collection, node) {\n  return Array.isArray(collection()) && collection().some(function (item) {\n    return item.node === node\n  })\n}\n\nfunction spawn (descriptor) {\n  this.data.push(descriptor)\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/project/tabbed-editor.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar send = require('value-event/event')\nvar getBaseName = require('path').basename\nvar getDirectory = require('path').dirname\nvar join = require('path').join\n\nvar ValueEvent = require('lib/value-event')\nvar Select = require('lib/params/select')\nvar ToggleButton = require('lib/params/toggle-button')\n\nvar renderEditor = require('./editor')\nvar rawEditor = require('./editor/raw.js')\n\nmodule.exports = TabbedEditor\n\nfunction TabbedEditor(project){\n  var data = project()\n  var fileObject = getItem(project)\n\n  var tabs = project.items._list.map(function (item) {\n    var tab = (data.rawMode && item)\n      ? rawEditor(item)\n      : renderEditor(item)\n    return h('div.tab', {\n      key: item.path,\n      className: fileObject === item ? '-active' : ''\n    }, tab)\n  })\n\n  var controls = h('span.controls', [\n    ToggleButton(project.rawMode, {\n      title: 'raw'\n    }),\n    Select(project.zoom, {\n      options: [\n        ['50%', 0.5],\n        ['75%', 0.75],\n        ['90%', 0.9],\n        ['100%', 1],\n        ['110%', 1.1],\n        ['125%', 1.25],\n        ['150%', 1.5]\n      ]\n    })\n  ])\n\n  return h('TabbedEditor', [\n    h('header', [project.items._list.map(renderTab, project), controls]),\n    tabs.length ? tabs : renderHelper()\n  ])\n}\n\nfunction renderTab(item){\n  var project = this\n  var actions = project.actions\n\n  var data = item&&item()\n  if (data){\n    var selected = project.selected() == item.path\n    return h('div.tab', {\n      'ev-click': send(project.selected.set, item.path),\n      'className': selected ? '-selected' : null\n    }, [\n      h('span', [getName(item.path)]),\n      h('button.close', {'ev-click': send(actions.closeFile, item.path)})\n    ])\n  } else {\n    return ''\n  }\n}\n\nfunction getName(path){\n  var base = getBaseName(path, '.json')\n  if (base === 'index'){\n    return getBaseName(getDirectory(path))\n  } else {\n    var dir = getBaseName(getDirectory(path))\n    return dir + ' > ' + base\n  }\n}\n\nfunction renderHelper(){\n  return h('div CenterTab', [\n    h('div Helper', [\n      h('a', {href: 'http://loopjs.com/'}, [\n        h('img', {src: 'file://' + join(__dirname, '..', '..', 'logo.png'), width: 128})\n      ]),\n      h('br'),\n      'For help visit ',\n      h('a', {href: 'http://loopjs.com/'}, 'loopjs.com')\n    ])\n  ])\n}\n\nfunction getItem(state){\n  var result = null\n  var path = state.selected()\n  state.items.some(function(item){\n    if (item.path === path){\n      result = item\n      return true\n    }\n  })\n  return result\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/project/editor/index.js":"var VirtualDom = require('virtual-dom')\nvar MainLoop = require('main-loop')\nvar h = require('micro-css/h')(require('virtual-dom/h'))\n\nvar Observ = require('observ')\nvar nextTick = require('next-tick')\nvar watch = require('observ/watch')\n\nvar renderNode = require('lib/render-node')\n\nmodule.exports = Editor\n\nfunction Editor(fileObject){\n  if (!(this instanceof Editor)) return new Editor(fileObject)\n  this.fileObject = fileObject\n}\n\nEditor.prototype.type = 'Widget'\n\nEditor.prototype.init = function(){\n\n  var state = this.state = {\n    releases: [],\n    fileObject: this.fileObject,\n    update: update\n  }\n\n  var pendingUpdate = false\n\n  function update(){\n    if (!pendingUpdate){\n      pendingUpdate = true\n      nextTick(doUpdate)\n    }\n  }\n\n  function doUpdate(){\n    pendingUpdate = false\n\n    // HACK: schedule 300 ms ahead to avoid audio interuption\n    //state.fileObject.context.scheduler.schedule(0.3)\n    loop.update()\n  }\n\n  var loop = MainLoop(null, function(){\n    if (state.fileObject && state.fileObject.node){\n      return renderNode(state.fileObject.node)\n    } else {\n      return h('div')\n    }\n  }, VirtualDom)\n\n  bindToObject(this, update)\n\n  return loop.target\n}\n\nEditor.prototype.update = function(prev, elem){\n  var state = this.state = prev.state\n  state.fileObject = this.fileObject\n\n  if (this.fileObject !== prev.fileObject){\n    bindToObject(this, state.update)\n    state.update()\n  }\n}\n\nEditor.prototype.destroy = function(elem){\n  var state = this.state\n  state.releases.forEach(invoke)\n  state.releases.length = 0\n}\n\nfunction bindToObject(self, update){\n  var state = self.state\n  var fileObject = self.fileObject\n\n  state.releases.forEach(invoke)\n  state.releases.length = 0\n\n  if (fileObject){\n    state.releases.push(\n      fileObject.onNode(update),\n      fileObject(update)\n    )\n    if (fileObject.resolved){\n      state.releases.push(\n        fileObject.resolved(update)\n      )\n    }\n  }\n}\n\nfunction invoke(func){\n  return func()\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/project/editor/raw.js":"\nvar JSMN = require('lib/jsmn.js')\nvar deepEqual = require('deep-equal')\nvar watch = require('observ/watch')\n\nvar ace = require('brace')\nrequire('brace/mode/javascript')\nrequire('brace/theme/ambiance')\n\nvar NO_TRANSACTION = {}\n\nmodule.exports = RawEditor\n\nfunction RawEditor(fileObject){\n  if (!(this instanceof RawEditor)){\n    return new RawEditor(fileObject)\n  }\n  this.fileObject = fileObject\n  this.file = fileObject && fileObject.file\n}\n\nRawEditor.prototype.type = 'Widget'\n\nRawEditor.prototype.init = function(){\n  var element = document.createElement('div')\n  element.className = 'RawEditor'\n\n  var el = document.createElement('div')\n\n  var textEditor = this.editor = ace.edit(el)\n\n  window.editors = window.editors || []\n  window.editors.push(textEditor)\n\n  textEditor.setTheme('ace/theme/ambiance');\n  textEditor.session.setMode('ace/mode/javascript')\n  textEditor.session.setUseWorker(false)\n  textEditor.session.setTabSize(2)\n  textEditor.renderer.setScrollMargin(20,100)\n  textEditor.renderer.setPadding(20)\n  textEditor.renderer.setShowGutter(false)\n\n  var currentFile = null\n  var self = this\n\n  var currentTransaction = NO_TRANSACTION\n  var lastSave = NO_TRANSACTION\n\n  textEditor.setFile = function(fileObject){\n    clearTimeout(saveTimer)\n\n    if (self.release){\n      self.release()\n      self.release = null\n    }\n\n    currentFile = fileObject\n\n    if (fileObject){\n      self.release = watch(fileObject, update)\n    }\n  }\n\n  function save(){\n    var value = textEditor.session.getValue()\n    if (currentFile){\n      try {\n        var object = JSMN.parse(value)\n        lastSave = object\n        currentFile.set(object)\n      } catch (ex) {}\n    }\n  }\n\n  function update(){\n    var data = currentFile ? currentFile() : null\n    if (data && !deepEqual(lastSave, data)) {\n      var newValue = JSMN.stringify(data || {})\n      currentTransaction = newValue\n      textEditor.session.setValue(newValue, -1)\n      currentTransaction = NO_TRANSACTION\n    }\n  }\n\n  var blurTimer = null\n  textEditor.on('focus', function(){\n    clearTimeout(blurTimer)\n  })\n\n  textEditor.on('blur', function(){\n    clearTimeout(blurTimer)\n    blurTimer = setTimeout(function(){\n      if (!textEditor.isFocused()){\n        update()\n      }\n    }, 100)\n  })\n\n  var saveTimer = null\n  textEditor.on('change', function(){\n    if (currentTransaction === NO_TRANSACTION){\n      clearTimeout(saveTimer)\n      saveTimer = setTimeout(save, 100)\n    }\n  })\n\n  textEditor.setFile(this.fileObject)\n\n  element.appendChild(el)\n  return element\n}\n\nRawEditor.prototype.update = function(prev, elem){\n  this.editor = prev.editor\n  this.release = prev.release\n\n  if (prev.file !== this.file){\n    this.editor.setFile(this.fileObject)\n  }\n  return elem\n}\n\nRawEditor.prototype.destroy = function(elem){\n  this.editor.destroy()\n  this.release && this.release()\n  this.release = null\n}\n","/home/travis/build/npmtest/node-npmtest-loop-drop/node_modules/loop-drop/nodes/triggers-chunk/slot-chooser.js":"var h = require('micro-css/h')(require('virtual-dom/h'))\nvar send = require('value-event/event')\n\nvar MPE = require('lib/mouse-position-event.js')\nvar nextTick = require('next-tick')\nvar importSample = require('lib/import-sample')\nvar extend = require('xtend/immutable')\n\nmodule.exports = SlotChooser\n\nfunction SlotChooser(chunk, spawnSlot){\n\n  var triggers = []\n  var shape = chunk.shape() || [1,1]\n  var selectedSlotId = chunk.selectedSlotId()\n  var slots = chunk.context.slotLookup\n  var length = shape[0] * shape[1]\n\n  for (var i=0;i<length;i++){\n    var id = String(i)\n    var slot = slots.get(id)\n    var width = (100 / shape[1]) + '%'\n    var dragInfo = { collection: chunk.slots, id: id, select: chunk.selectedSlotId.set, spawnSlot: spawnSlot, chunk: chunk }\n\n    if (slot){\n      triggers.push(\n        h('div.slot', {\n          'draggable': true,\n\n          'ev-dragstart': MPE(dragStart, dragInfo),\n          'ev-dragend': MPE(dragEnd, dragInfo),\n          'ev-dragover': MPE(dragOver, dragInfo),\n          'ev-dragleave': MPE(dragLeave, dragInfo),\n          'ev-drop': MPE(drop, dragInfo),\n\n          'style': {width: width},\n          'className': selectedSlotId === id ? '-selected' : '',\n          'ev-click': send(chunk.selectedSlotId.set, id)\n        }, [\n          id,\n          h('button.remove', {\n            'ev-click': send(chunk.slots.remove, slot),\n          }, 'X')\n        ])\n      )\n    } else {\n      triggers.push(\n        h('div.slot -spawn', {\n          'style': {width: width},\n\n          'ev-dragover': MPE(dragOver, dragInfo),\n          'ev-dragleave': MPE(dragLeave, dragInfo),\n          'ev-drop': MPE(drop, dragInfo),\n\n          'ev-click': send(spawnSlot, { id: id, chunk: chunk })\n        }, '+ trigger')\n      )\n    }\n\n\n  }\n\n  return h('SlotChooser', [\n    triggers,\n    h('div.spacer'),\n    h('div.slot -output', {\n      'className': selectedSlotId === 'output' ? '-selected' : '',\n      'ev-click': send(chunk.selectedSlotId.set, 'output')\n    }, 'output')\n  ])\n}\n\nvar currentDrag = null\n\nfunction dragStart(ev){\n  currentDrag = ev.data\n}\n\nfunction dragEnd(ev){\n  currentDrag = null\n}\n\nfunction dragOver(ev){\n  ev.currentTarget.classList.add('-dragOver')\n  if (ev.altKey || containsFiles(ev.dataTransfer)) {\n    ev.dataTransfer.dropEffect = 'copy'\n  } else {\n    ev.dataTransfer.dropEffect = 'move'\n  }\n  ev.event.preventDefault()\n}\n\nfunction drop(ev){\n  dragLeave(ev)\n  ev.event.preventDefault()\n\n  var targetCollection = ev.data.collection\n  var targetLookup = targetCollection.context.slotLookup\n  var target = targetLookup.get(ev.data.id)\n\n  if (containsFiles(ev.dataTransfer) || ev.dataTransfer.types.includes('loop-drop/sample-path')) {\n    var path = ev.dataTransfer.items[0].kind === 'file'\n      ? ev.dataTransfer.items[0].getAsFile().path\n      : ev.dataTransfer.getData('loop-drop/sample-path')\n\n    if (target){\n      targetCollection.remove(target)\n    }\n\n    var node = targetCollection.push({\n      id: ev.data.id,\n      node: 'slot',\n      output: 'output',\n      sources: [\n        { node: 'source/sample', mode: 'oneshot' }\n      ]\n    })\n\n    importSample(targetCollection.context, path, function (err, descriptor) {\n      var player = node.sources.get(0)\n      player.set(extend(player(), descriptor))\n      ev.data.select(ev.data.id)\n    })\n  } else if (ev.dataTransfer.types.includes('loop-drop/source')) {\n    var data = JSON.parse(ev.dataTransfer.getData('loop-drop/source'))\n    if (!target) {\n      target = ev.data.spawnSlot({id: ev.data.id, chunk: ev.data.chunk})\n    }\n    target.sources.push(data)\n  } else if (ev.dataTransfer.types.includes('loop-drop/processor')) {\n    var data = JSON.parse(ev.dataTransfer.getData('loop-drop/processor'))\n    if (!target) {\n      target = ev.data.spawnSlot({id: ev.data.id, chunk: ev.data.chunk})\n    }\n    target.processors.push(data)\n  } else {\n    var sourceCollection = currentDrag.collection\n    var sourceLookup = sourceCollection.context.slotLookup\n    var source = sourceLookup.get(currentDrag.id)\n    var isCopying = ev.altKey\n\n    if (source && source !== target){\n\n      if (target){\n        // clear out existing\n        targetCollection.remove(target)\n      }\n\n      if (sourceCollection !== targetCollection || isCopying){\n\n        // move to different collection\n        var descriptor = obtainWithId(ev.data.id, source())\n\n        if (!isCopying){\n          sourceCollection.remove(source)\n        }\n\n        targetCollection.push(descriptor)\n\n      } else {\n        source.id.set(ev.data.id)\n      }\n\n      ev.data.select(ev.data.id)\n    }\n  }\n}\n\nfunction dragLeave(ev){\n  ev.currentTarget.classList.remove('-dragOver')\n}\n\nfunction obtainWithId(id, obj){\n  obj = JSON.parse(JSON.stringify(obj))\n  obj.id = id\n  return obj\n}\n\nfunction containsFiles(transfer) {\n  if (transfer.types) {\n    for (var i = 0; i < event.dataTransfer.types.length; i++) {\n      if (event.dataTransfer.types[i] == \"Files\") {\n        return true\n      }\n    }\n  }\n  return false\n}\n"}